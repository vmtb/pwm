
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800444c  0800444c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800444c  0800444c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  080044bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080044bc  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce30  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf5  00000000  00000000  0002cf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a09  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011722  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1e9  00000000  00000000  000418e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006988b  00000000  00000000  00050acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035d4  00000000  00000000  000ba358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000bd92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043bc 	.word	0x080043bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080043bc 	.word	0x080043bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	b29a      	uxth	r2, r3
 8000418:	2301      	movs	r3, #1
 800041a:	425b      	negs	r3, r3
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	4804      	ldr	r0, [pc, #16]	; (8000430 <_write+0x28>)
 8000420:	f002 fbf8 	bl	8002c14 <HAL_UART_Transmit>
    return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	0018      	movs	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	b004      	add	sp, #16
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	2000010c 	.word	0x2000010c

08000434 <map_custom>:
long map_custom(long x, long in_min, long in_max, long out_min, long out_max) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
  // Vérifie que x est dans la plage d'entrée spécifiée
  if (x < in_min) {
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	429a      	cmp	r2, r3
 8000448:	da02      	bge.n	8000450 <map_custom+0x1c>
    x = in_min;
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e005      	b.n	800045c <map_custom+0x28>
  } else if (x > in_max) {
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dd01      	ble.n	800045c <map_custom+0x28>
    x = in_max;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	60fb      	str	r3, [r7, #12]
  }

  // Calcule la valeur mappée
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	69b9      	ldr	r1, [r7, #24]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	1a8a      	subs	r2, r1, r2
 8000468:	435a      	muls	r2, r3
 800046a:	0010      	movs	r0, r2
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	0019      	movs	r1, r3
 8000474:	f7ff fedc 	bl	8000230 <__divsi3>
 8000478:	0003      	movs	r3, r0
 800047a:	001a      	movs	r2, r3
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	18d3      	adds	r3, r2, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f000 fbdd 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000492:	f000 f847 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f981 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049a:	f000 f94f 	bl	800073c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800049e:	f000 f8ed 	bl	800067c <MX_TIM3_Init>
  MX_ADC_Init();
 80004a2:	f000 f88f 	bl	80005c4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <main+0x88>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fef8 	bl	80022a0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc);
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <main+0x8c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd92 	bl	8000fdc <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	009a      	lsls	r2, r3, #2
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <main+0x8c>)
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fddf 	bl	8001084 <HAL_ADC_PollForConversion>
	  valPotentiomter = HAL_ADC_GetValue(&hadc) ;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <main+0x8c>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fe73 	bl	80011b4 <HAL_ADC_GetValue>
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	801a      	strh	r2, [r3, #0]
	  printf("QG \n"   );
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <main+0x90>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f003 f8d0 	bl	800367c <puts>
	  printf("q %d \n", valPotentiomter);
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <main+0x94>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f003 f863 	bl	80035b0 <iprintf>
//	  for (int i = 0; i<255; i++){
//		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
//		  HAL_Delay(5);
//	  }

	  int valCouleur = map_custom(valPotentiomter, 0, 4043, 0, 255) ;
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	8818      	ldrh	r0, [r3, #0]
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <main+0x98>)
 80004f0:	23ff      	movs	r3, #255	; 0xff
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2300      	movs	r3, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	f7ff ff9c 	bl	8000434 <map_custom>
 80004fc:	0003      	movs	r3, r0
 80004fe:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, valCouleur);
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <main+0x88>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f000 fc03 	bl	8000d14 <HAL_Delay>
  {
 800050e:	e7d3      	b.n	80004b8 <main+0x30>
 8000510:	200000c4 	.word	0x200000c4
 8000514:	20000084 	.word	0x20000084
 8000518:	080043d4 	.word	0x080043d4
 800051c:	080043d8 	.word	0x080043d8
 8000520:	00000fcb 	.word	0x00000fcb

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b091      	sub	sp, #68	; 0x44
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2410      	movs	r4, #16
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2330      	movs	r3, #48	; 0x30
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 f99d 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2310      	movs	r3, #16
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f003 f996 	bl	8003874 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000548:	0021      	movs	r1, r4
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2212      	movs	r2, #18
 800054e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2201      	movs	r2, #1
 8000554:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2210      	movs	r2, #16
 8000560:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2210      	movs	r2, #16
 8000566:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2202      	movs	r2, #2
 800056c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22a0      	movs	r2, #160	; 0xa0
 8000578:	0392      	lsls	r2, r2, #14
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	187b      	adds	r3, r7, r1
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f9dd 	bl	8001944 <HAL_RCC_OscConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800058e:	f000 f97f 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	003b      	movs	r3, r7
 8000594:	2207      	movs	r2, #7
 8000596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	003b      	movs	r3, r7
 800059a:	2202      	movs	r2, #2
 800059c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	003b      	movs	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	003b      	movs	r3, r7
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fce2 	bl	8001f78 <HAL_RCC_ClockConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 f96a 	bl	8000890 <Error_Handler>
  }
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b011      	add	sp, #68	; 0x44
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	0018      	movs	r0, r3
 80005ce:	230c      	movs	r3, #12
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f003 f94e 	bl	8003874 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC_Init+0xb0>)
 80005da:	4a27      	ldr	r2, [pc, #156]	; (8000678 <MX_ADC_Init+0xb4>)
 80005dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_ADC_Init+0xb0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC_Init+0xb0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <MX_ADC_Init+0xb0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_ADC_Init+0xb0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC_Init+0xb0>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_ADC_Init+0xb0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC_Init+0xb0>)
 8000604:	2200      	movs	r2, #0
 8000606:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC_Init+0xb0>)
 800060a:	2201      	movs	r2, #1
 800060c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC_Init+0xb0>)
 8000610:	2200      	movs	r2, #0
 8000612:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_ADC_Init+0xb0>)
 8000616:	22c2      	movs	r2, #194	; 0xc2
 8000618:	32ff      	adds	r2, #255	; 0xff
 800061a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_ADC_Init+0xb0>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC_Init+0xb0>)
 8000624:	2224      	movs	r2, #36	; 0x24
 8000626:	2100      	movs	r1, #0
 8000628:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_ADC_Init+0xb0>)
 800062c:	2201      	movs	r2, #1
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_ADC_Init+0xb0>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fb92 	bl	8000d5c <HAL_ADC_Init>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800063c:	f000 f928 	bl	8000890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0152      	lsls	r2, r2, #5
 800064c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	0552      	lsls	r2, r2, #21
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_ADC_Init+0xb0>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fdb5 	bl	80011cc <HAL_ADC_ConfigChannel>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000666:	f000 f913 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000084 	.word	0x20000084
 8000678:	40012400 	.word	0x40012400

0800067c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	2320      	movs	r3, #32
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2308      	movs	r3, #8
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 f8f1 	bl	8003874 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	231c      	movs	r3, #28
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 f8ea 	bl	8003874 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <MX_TIM3_Init+0xbc>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 187;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006a8:	22bb      	movs	r2, #187	; 0xbb
 80006aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fd9a 	bl	8002200 <HAL_TIM_PWM_Init>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f8de 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2120      	movs	r1, #32
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e2:	187a      	adds	r2, r7, r1
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_TIM3_Init+0xb8>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f9e7 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80006f2:	f000 f8cd 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2260      	movs	r2, #96	; 0x60
 80006fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070e:	1d39      	adds	r1, r7, #4
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_TIM3_Init+0xb8>)
 8000712:	2200      	movs	r2, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fe75 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800071e:	f000 f8b7 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <MX_TIM3_Init+0xb8>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 f941 	bl	80009ac <HAL_TIM_MspPostInit>

}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b00a      	add	sp, #40	; 0x28
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	200000c4 	.word	0x200000c4
 8000738:	40000400 	.word	0x40000400

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	22e1      	movs	r2, #225	; 0xe1
 800074a:	0252      	lsls	r2, r2, #9
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f9f3 	bl	8002b6c <HAL_UART_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f881 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000010c 	.word	0x2000010c
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	240c      	movs	r4, #12
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2314      	movs	r3, #20
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 f861 	bl	8003874 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <MX_GPIO_Init+0xec>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <MX_GPIO_Init+0xec>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0309      	lsls	r1, r1, #12
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_GPIO_Init+0xec>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	031b      	lsls	r3, r3, #12
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_GPIO_Init+0xec>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xec>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	03c9      	lsls	r1, r1, #15
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xec>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	03db      	lsls	r3, r3, #15
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_GPIO_Init+0xec>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xec>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0289      	lsls	r1, r1, #10
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xec>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	029b      	lsls	r3, r3, #10
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f87a 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	0192      	lsls	r2, r2, #6
 800081a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2284      	movs	r2, #132	; 0x84
 8000820:	0392      	lsls	r2, r2, #14
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	193b      	adds	r3, r7, r4
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xf0>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f000 fef9 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2220      	movs	r2, #32
 800083a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2201      	movs	r2, #1
 8000840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	193a      	adds	r2, r7, r4
 8000850:	2390      	movs	r3, #144	; 0x90
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fee6 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	187b      	adds	r3, r7, r1
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <MX_GPIO_Init+0xf0>)
 8000876:	0019      	movs	r1, r3
 8000878:	0010      	movs	r0, r2
 800087a:	f000 fed5 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b009      	add	sp, #36	; 0x24
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000
 800088c:	48000800 	.word	0x48000800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	699a      	ldr	r2, [r3, #24]
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	619a      	str	r2, [r3, #24]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	69da      	ldr	r2, [r3, #28]
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0549      	lsls	r1, r1, #21
 80008c4:	430a      	orrs	r2, r1
 80008c6:	61da      	str	r2, [r3, #28]
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_MspInit+0x44>)
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	4013      	ands	r3, r2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	2414      	movs	r4, #20
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2314      	movs	r3, #20
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f002 ffbc 	bl	8003874 <memset>
  if(hadc->Instance==ADC1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_ADC_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12b      	bne.n	800095e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_ADC_MspInit+0x88>)
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_ADC_MspInit+0x88>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0089      	lsls	r1, r1, #2
 8000910:	430a      	orrs	r2, r1
 8000912:	619a      	str	r2, [r3, #24]
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_ADC_MspInit+0x88>)
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_ADC_MspInit+0x88>)
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_ADC_MspInit+0x88>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0289      	lsls	r1, r1, #10
 800092c:	430a      	orrs	r2, r1
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_ADC_MspInit+0x88>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	029b      	lsls	r3, r3, #10
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2203      	movs	r2, #3
 8000948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	193a      	adds	r2, r7, r4
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fe65 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40012400 	.word	0x40012400
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_PWM_MspInit+0x34>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000988:	2102      	movs	r1, #2
 800098a:	430a      	orrs	r2, r1
 800098c:	61da      	str	r2, [r3, #28]
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	2202      	movs	r2, #2
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b004      	add	sp, #16
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40000400 	.word	0x40000400
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	240c      	movs	r4, #12
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 ff58 	bl	8003874 <memset>
  if(htim->Instance==TIM3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <HAL_TIM_MspPostInit+0x74>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d124      	bne.n	8000a18 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_TIM_MspPostInit+0x78>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_TIM_MspPostInit+0x78>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_TIM_MspPostInit+0x78>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2202      	movs	r2, #2
 80009f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	2390      	movs	r3, #144	; 0x90
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fe08 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b009      	add	sp, #36	; 0x24
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40000400 	.word	0x40000400
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	2414      	movs	r4, #20
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f002 ff1a 	bl	8003874 <memset>
  if(huart->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0x90>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d132      	bne.n	8000ab0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a4c:	69da      	ldr	r2, [r3, #28]
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0289      	lsls	r1, r1, #10
 8000a54:	430a      	orrs	r2, r1
 8000a56:	61da      	str	r2, [r3, #28]
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	029b      	lsls	r3, r3, #10
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0289      	lsls	r1, r1, #10
 8000a70:	430a      	orrs	r2, r1
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	029b      	lsls	r3, r3, #10
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	187a      	adds	r2, r7, r1
 8000aa4:	2390      	movs	r3, #144	; 0x90
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fdbc 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b00b      	add	sp, #44	; 0x2c
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f8fa 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e00a      	b.n	8000b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b00:	e000      	b.n	8000b04 <_read+0x16>
 8000b02:	bf00      	nop
 8000b04:	0001      	movs	r1, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	b2ca      	uxtb	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <_read+0x12>
  }

  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b006      	add	sp, #24
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	0192      	lsls	r2, r2, #6
 8000b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_isatty>:

int _isatty(int file)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f002 feb6 	bl	8003920 <__errno>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d2      	adds	r2, r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20002000 	.word	0x20002000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000194 	.word	0x20000194
 8000be8:	200002e8 	.word	0x200002e8

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfc:	f7ff fff6 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c26:	f002 fe81 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fc2d 	bl	8000488 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c3c:	08004454 	.word	0x08004454
  ldr r2, =_sbss
 8000c40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c44:	200002e8 	.word	0x200002e8

08000c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_IRQHandler>
	...

08000c4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_Init+0x24>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_Init+0x24>)
 8000c56:	2110      	movs	r1, #16
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f809 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff fe1b 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000c7e:	681c      	ldr	r4, [r3, #0]
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_InitTick+0x60>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	0019      	movs	r1, r3
 8000c86:	23fa      	movs	r3, #250	; 0xfa
 8000c88:	0098      	lsls	r0, r3, #2
 8000c8a:	f7ff fa47 	bl	800011c <__udivsi3>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	0019      	movs	r1, r3
 8000c92:	0020      	movs	r0, r4
 8000c94:	f7ff fa42 	bl	800011c <__udivsi3>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fcb7 	bl	800160e <HAL_SYSTICK_Config>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e00f      	b.n	8000cc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d80b      	bhi.n	8000cc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fc94 	bl	80015e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_InitTick+0x64>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b003      	add	sp, #12
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000198 	.word	0x20000198

08000d00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000198 	.word	0x20000198

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff fff0 	bl	8000d00 <HAL_GetTick>
 8000d20:	0003      	movs	r3, r0
 8000d22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	001a      	movs	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	f7ff ffe0 	bl	8000d00 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e125      	b.n	8000fc6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10a      	bne.n	8000d98 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2234      	movs	r2, #52	; 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fda6 	bl	80008e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d000      	beq.n	8000da4 <HAL_ADC_Init+0x48>
 8000da2:	e103      	b.n	8000fac <HAL_ADC_Init+0x250>
 8000da4:	230f      	movs	r3, #15
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d000      	beq.n	8000db0 <HAL_ADC_Init+0x54>
 8000dae:	e0fd      	b.n	8000fac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2204      	movs	r2, #4
 8000db8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000dba:	d000      	beq.n	8000dbe <HAL_ADC_Init+0x62>
 8000dbc:	e0f6      	b.n	8000fac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc2:	4a83      	ldr	r2, [pc, #524]	; (8000fd0 <HAL_ADC_Init+0x274>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d112      	bne.n	8000e02 <HAL_ADC_Init+0xa6>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d009      	beq.n	8000dfe <HAL_ADC_Init+0xa2>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	401a      	ands	r2, r3
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Init+0xa6>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_ADC_Init+0xa8>
 8000e02:	2300      	movs	r3, #0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d116      	bne.n	8000e36 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2218      	movs	r2, #24
 8000e10:	4393      	bics	r3, r2
 8000e12:	0019      	movs	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	0899      	lsrs	r1, r3, #2
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4964      	ldr	r1, [pc, #400]	; (8000fd4 <HAL_ADC_Init+0x278>)
 8000e42:	400a      	ands	r2, r1
 8000e44:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7e1b      	ldrb	r3, [r3, #24]
 8000e4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7e5b      	ldrb	r3, [r3, #25]
 8000e50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7e9b      	ldrb	r3, [r3, #26]
 8000e58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d002      	beq.n	8000e6a <HAL_ADC_Init+0x10e>
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	015b      	lsls	r3, r3, #5
 8000e68:	e000      	b.n	8000e6c <HAL_ADC_Init+0x110>
 8000e6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e72:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADC_Init+0x124>
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	e000      	b.n	8000e82 <HAL_ADC_Init+0x126>
 8000e80:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e82:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2124      	movs	r1, #36	; 0x24
 8000e88:	5c5b      	ldrb	r3, [r3, r1]
 8000e8a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e8c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7edb      	ldrb	r3, [r3, #27]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d115      	bne.n	8000ec8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	0252      	lsls	r2, r2, #9
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	e00b      	b.n	8000ec8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69da      	ldr	r2, [r3, #28]
 8000ecc:	23c2      	movs	r3, #194	; 0xc2
 8000ece:	33ff      	adds	r3, #255	; 0xff
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d007      	beq.n	8000ee4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000edc:	4313      	orrs	r3, r2
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d01b      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d017      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d013      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d00f      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00b      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d007      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	2b06      	cmp	r3, #6
 8000f2e:	d003      	beq.n	8000f38 <HAL_ADC_Init+0x1dc>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	d112      	bne.n	8000f5e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2107      	movs	r1, #7
 8000f44:	438a      	bics	r2, r1
 8000f46:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6959      	ldr	r1, [r3, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	2207      	movs	r2, #7
 8000f54:	401a      	ands	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_ADC_Init+0x27c>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d10b      	bne.n	8000f86 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f84:	e01c      	b.n	8000fc0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	4393      	bics	r3, r2
 8000f8e:	2210      	movs	r2, #16
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000faa:	e009      	b.n	8000fc0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	fffffefd 	.word	0xfffffefd
 8000fd4:	fffe0219 	.word	0xfffe0219
 8000fd8:	833fffe7 	.word	0x833fffe7

08000fdc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d138      	bne.n	800106a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2234      	movs	r2, #52	; 0x34
 8000ffc:	5c9b      	ldrb	r3, [r3, r2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Start+0x2a>
 8001002:	2302      	movs	r3, #2
 8001004:	e038      	b.n	8001078 <HAL_ADC_Start+0x9c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2234      	movs	r2, #52	; 0x34
 800100a:	2101      	movs	r1, #1
 800100c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7e5b      	ldrb	r3, [r3, #25]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d007      	beq.n	8001026 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001016:	230f      	movs	r3, #15
 8001018:	18fc      	adds	r4, r7, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0018      	movs	r0, r3
 800101e:	f000 f9cb 	bl	80013b8 <ADC_Enable>
 8001022:	0003      	movs	r3, r0
 8001024:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001026:	230f      	movs	r3, #15
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d120      	bne.n	8001072 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_ADC_Start+0xa4>)
 8001036:	4013      	ands	r3, r2
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2234      	movs	r2, #52	; 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	221c      	movs	r2, #28
 8001056:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2104      	movs	r1, #4
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	e003      	b.n	8001072 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001072:	230f      	movs	r3, #15
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b005      	add	sp, #20
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	fffff0fe 	.word	0xfffff0fe

08001084 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	2b08      	cmp	r3, #8
 8001094:	d102      	bne.n	800109c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001096:	2308      	movs	r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e014      	b.n	80010c6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10b      	bne.n	80010c2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	2220      	movs	r2, #32
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2234      	movs	r2, #52	; 0x34
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e071      	b.n	80011a6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010c2:	230c      	movs	r3, #12
 80010c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010c6:	f7ff fe1b 	bl	8000d00 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010ce:	e01f      	b.n	8001110 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	d01c      	beq.n	8001110 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_ADC_PollForConversion+0x68>
 80010dc:	f7ff fe10 	bl	8000d00 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d211      	bcs.n	8001110 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	d10b      	bne.n	8001110 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fc:	2204      	movs	r2, #4
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2234      	movs	r2, #52	; 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e04a      	b.n	80011a6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	d0d9      	beq.n	80010d0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4013      	ands	r3, r2
 8001136:	d12d      	bne.n	8001194 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800113c:	2b00      	cmp	r3, #0
 800113e:	d129      	bne.n	8001194 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2208      	movs	r2, #8
 8001148:	4013      	ands	r3, r2
 800114a:	2b08      	cmp	r3, #8
 800114c:	d122      	bne.n	8001194 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2204      	movs	r2, #4
 8001156:	4013      	ands	r3, r2
 8001158:	d110      	bne.n	800117c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	210c      	movs	r1, #12
 8001166:	438a      	bics	r2, r1
 8001168:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_ADC_PollForConversion+0x12c>)
 8001170:	4013      	ands	r3, r2
 8001172:	2201      	movs	r2, #1
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
 800117a:	e00b      	b.n	8001194 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	2220      	movs	r2, #32
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	2201      	movs	r2, #1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	220c      	movs	r2, #12
 80011a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	fffffefe 	.word	0xfffffefe

080011b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d6:	230f      	movs	r3, #15
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	055b      	lsls	r3, r3, #21
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d011      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00d      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d009      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	2b03      	cmp	r3, #3
 8001204:	d005      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	2b04      	cmp	r3, #4
 800120c:	d001      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x46>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2234      	movs	r2, #52	; 0x34
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x54>
 800121c:	2302      	movs	r3, #2
 800121e:	e0bb      	b.n	8001398 <HAL_ADC_ConfigChannel+0x1cc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2234      	movs	r2, #52	; 0x34
 8001224:	2101      	movs	r1, #1
 8001226:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2204      	movs	r2, #4
 8001230:	4013      	ands	r3, r2
 8001232:	d000      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
 8001234:	e09f      	b.n	8001376 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a59      	ldr	r2, [pc, #356]	; (80013a0 <HAL_ADC_ConfigChannel+0x1d4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x76>
 8001240:	e077      	b.n	8001332 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	055b      	lsls	r3, r3, #21
 8001260:	429a      	cmp	r2, r3
 8001262:	d037      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b01      	cmp	r3, #1
 800126a:	d033      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b02      	cmp	r3, #2
 8001272:	d02f      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	2b03      	cmp	r3, #3
 800127a:	d02b      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b04      	cmp	r3, #4
 8001282:	d027      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b05      	cmp	r3, #5
 800128a:	d023      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	2b06      	cmp	r3, #6
 8001292:	d01f      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	2b07      	cmp	r3, #7
 800129a:	d01b      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2107      	movs	r1, #7
 80012a8:	400b      	ands	r3, r1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d012      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2107      	movs	r1, #7
 80012ba:	438a      	bics	r2, r1
 80012bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6959      	ldr	r1, [r3, #20]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2207      	movs	r2, #7
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d003      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x118>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b11      	cmp	r3, #17
 80012e2:	d152      	bne.n	800138a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d102      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x12a>
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	e001      	b.n	80012fa <HAL_ADC_ConfigChannel+0x12e>
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	03db      	lsls	r3, r3, #15
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b10      	cmp	r3, #16
 8001306:	d140      	bne.n	800138a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4927      	ldr	r1, [pc, #156]	; (80013ac <HAL_ADC_ConfigChannel+0x1e0>)
 800130e:	0018      	movs	r0, r3
 8001310:	f7fe ff04 	bl	800011c <__udivsi3>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	189b      	adds	r3, r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001322:	e002      	b.n	800132a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3b01      	subs	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f9      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x158>
 8001330:	e02b      	b.n	800138a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	4099      	lsls	r1, r3
 8001340:	000b      	movs	r3, r1
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b10      	cmp	r3, #16
 8001352:	d003      	beq.n	800135c <HAL_ADC_ConfigChannel+0x190>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b11      	cmp	r3, #17
 800135a:	d116      	bne.n	800138a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_ADC_ConfigChannel+0x1d8>)
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b10      	cmp	r3, #16
 8001366:	d101      	bne.n	800136c <HAL_ADC_ConfigChannel+0x1a0>
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800136a:	e000      	b.n	800136e <HAL_ADC_ConfigChannel+0x1a2>
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_ADC_ConfigChannel+0x1e8>)
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e009      	b.n	800138a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	2220      	movs	r2, #32
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2234      	movs	r2, #52	; 0x34
 800138e:	2100      	movs	r1, #0
 8001390:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	00001001 	.word	0x00001001
 80013a4:	40012708 	.word	0x40012708
 80013a8:	20000000 	.word	0x20000000
 80013ac:	000f4240 	.word	0x000f4240
 80013b0:	ff7fffff 	.word	0xff7fffff
 80013b4:	ffbfffff 	.word	0xffbfffff

080013b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2203      	movs	r2, #3
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d112      	bne.n	80013fc <ADC_Enable+0x44>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d009      	beq.n	80013f8 <ADC_Enable+0x40>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	401a      	ands	r2, r3
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d101      	bne.n	80013fc <ADC_Enable+0x44>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <ADC_Enable+0x46>
 80013fc:	2300      	movs	r3, #0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d152      	bne.n	80014a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <ADC_Enable+0xfc>)
 800140a:	4013      	ands	r3, r2
 800140c:	d00d      	beq.n	800142a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	2210      	movs	r2, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	2201      	movs	r2, #1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e03f      	b.n	80014aa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <ADC_Enable+0x100>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	491f      	ldr	r1, [pc, #124]	; (80014bc <ADC_Enable+0x104>)
 8001440:	0018      	movs	r0, r3
 8001442:	f7fe fe6b 	bl	800011c <__udivsi3>
 8001446:	0003      	movs	r3, r0
 8001448:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800144a:	e002      	b.n	8001452 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3b01      	subs	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001458:	f7ff fc52 	bl	8000d00 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001460:	e01b      	b.n	800149a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001462:	f7ff fc4d 	bl	8000d00 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d914      	bls.n	800149a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	2b01      	cmp	r3, #1
 800147c:	d00d      	beq.n	800149a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	2210      	movs	r2, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2201      	movs	r2, #1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d1dc      	bne.n	8001462 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	80000017 	.word	0x80000017
 80014b8:	20000000 	.word	0x20000000
 80014bc:	000f4240 	.word	0x000f4240

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	0002      	movs	r2, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b7f      	cmp	r3, #127	; 0x7f
 80014d4:	d828      	bhi.n	8001528 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d6:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <__NVIC_SetPriority+0xd4>)
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	33c0      	adds	r3, #192	; 0xc0
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	589b      	ldr	r3, [r3, r2]
 80014e6:	1dfa      	adds	r2, r7, #7
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	0011      	movs	r1, r2
 80014ec:	2203      	movs	r2, #3
 80014ee:	400a      	ands	r2, r1
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	21ff      	movs	r1, #255	; 0xff
 80014f4:	4091      	lsls	r1, r2
 80014f6:	000a      	movs	r2, r1
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	401a      	ands	r2, r3
 80014fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	401a      	ands	r2, r3
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	2303      	movs	r3, #3
 800150e:	4003      	ands	r3, r0
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	481f      	ldr	r0, [pc, #124]	; (8001594 <__NVIC_SetPriority+0xd4>)
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	430a      	orrs	r2, r1
 8001520:	33c0      	adds	r3, #192	; 0xc0
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001526:	e031      	b.n	800158c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <__NVIC_SetPriority+0xd8>)
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	0019      	movs	r1, r3
 8001530:	230f      	movs	r3, #15
 8001532:	400b      	ands	r3, r1
 8001534:	3b08      	subs	r3, #8
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3306      	adds	r3, #6
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1dfa      	adds	r2, r7, #7
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	0011      	movs	r1, r2
 8001548:	2203      	movs	r2, #3
 800154a:	400a      	ands	r2, r1
 800154c:	00d2      	lsls	r2, r2, #3
 800154e:	21ff      	movs	r1, #255	; 0xff
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	43d2      	mvns	r2, r2
 8001556:	401a      	ands	r2, r3
 8001558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	401a      	ands	r2, r3
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	0018      	movs	r0, r3
 8001568:	2303      	movs	r3, #3
 800156a:	4003      	ands	r3, r0
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <__NVIC_SetPriority+0xd8>)
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	001c      	movs	r4, r3
 8001578:	230f      	movs	r3, #15
 800157a:	4023      	ands	r3, r4
 800157c:	3b08      	subs	r3, #8
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	430a      	orrs	r2, r1
 8001582:	3306      	adds	r3, #6
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	18c3      	adds	r3, r0, r3
 8001588:	3304      	adds	r3, #4
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b003      	add	sp, #12
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	045b      	lsls	r3, r3, #17
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d301      	bcc.n	80015b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b0:	2301      	movs	r3, #1
 80015b2:	e010      	b.n	80015d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <SysTick_Config+0x44>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	3a01      	subs	r2, #1
 80015ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015bc:	2301      	movs	r3, #1
 80015be:	425b      	negs	r3, r3
 80015c0:	2103      	movs	r1, #3
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff ff7c 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x44>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x44>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	210f      	movs	r1, #15
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	1c02      	adds	r2, r0, #0
 80015f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	0011      	movs	r1, r2
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff ffbf 	bl	800159c <SysTick_Config>
 800161e:	0003      	movs	r3, r0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e14f      	b.n	80018d8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d100      	bne.n	8001650 <HAL_GPIO_Init+0x28>
 800164e:	e140      	b.n	80018d2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	4013      	ands	r3, r2
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2203      	movs	r2, #3
 8001662:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	2201      	movs	r2, #1
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	4013      	ands	r3, r2
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	58d3      	ldr	r3, [r2, r3]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2207      	movs	r2, #7
 8001724:	4013      	ands	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	409a      	lsls	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2107      	movs	r1, #7
 800173e:	400b      	ands	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	401a      	ands	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	029b      	lsls	r3, r3, #10
 8001796:	4013      	ands	r3, r2
 8001798:	d100      	bne.n	800179c <HAL_GPIO_Init+0x174>
 800179a:	e09a      	b.n	80018d2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179c:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b4:	4a4f      	ldr	r2, [pc, #316]	; (80018f4 <HAL_GPIO_Init+0x2cc>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	589b      	ldr	r3, [r3, r2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2203      	movs	r2, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	2390      	movs	r3, #144	; 0x90
 80017dc:	05db      	lsls	r3, r3, #23
 80017de:	429a      	cmp	r2, r3
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x1e2>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a44      	ldr	r2, [pc, #272]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x1de>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a43      	ldr	r2, [pc, #268]	; (80018fc <HAL_GPIO_Init+0x2d4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x1da>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a42      	ldr	r2, [pc, #264]	; (8001900 <HAL_GPIO_Init+0x2d8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x1d6>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x1e4>
 80017fe:	2305      	movs	r3, #5
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x1e4>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x1e4>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x1e4>
 800180a:	2300      	movs	r3, #0
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	2103      	movs	r1, #3
 8001810:	400a      	ands	r2, r1
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x2cc>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	035b      	lsls	r3, r3, #13
 8001842:	4013      	ands	r3, r2
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43da      	mvns	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	039b      	lsls	r3, r3, #14
 800186c:	4013      	ands	r3, r2
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	4013      	ands	r3, r2
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	4013      	ands	r3, r2
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	40da      	lsrs	r2, r3
 80018e0:	1e13      	subs	r3, r2, #0
 80018e2:	d000      	beq.n	80018e6 <HAL_GPIO_Init+0x2be>
 80018e4:	e6a8      	b.n	8001638 <HAL_GPIO_Init+0x10>
  } 
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b006      	add	sp, #24
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	0008      	movs	r0, r1
 8001912:	0011      	movs	r1, r2
 8001914:	1cbb      	adds	r3, r7, #2
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	1c7b      	adds	r3, r7, #1
 800191c:	1c0a      	adds	r2, r1, #0
 800191e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	1c7b      	adds	r3, r7, #1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001928:	1cbb      	adds	r3, r7, #2
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	1cbb      	adds	r3, r7, #2
 8001934:	881a      	ldrh	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e301      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_RCC_OscConfig+0x1e>
 8001960:	e08d      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001962:	4bc3      	ldr	r3, [pc, #780]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	220c      	movs	r2, #12
 8001968:	4013      	ands	r3, r2
 800196a:	2b04      	cmp	r3, #4
 800196c:	d00e      	beq.n	800198c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196e:	4bc0      	ldr	r3, [pc, #768]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	220c      	movs	r2, #12
 8001974:	4013      	ands	r3, r2
 8001976:	2b08      	cmp	r3, #8
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
 800197a:	4bbd      	ldr	r3, [pc, #756]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	401a      	ands	r2, r3
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	429a      	cmp	r2, r3
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4bb8      	ldr	r3, [pc, #736]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x56>
 8001998:	e070      	b.n	8001a7c <HAL_RCC_OscConfig+0x138>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d000      	beq.n	80019a4 <HAL_RCC_OscConfig+0x60>
 80019a2:	e06b      	b.n	8001a7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2d8      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x7c>
 80019b0:	4baf      	ldr	r3, [pc, #700]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4bae      	ldr	r3, [pc, #696]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0249      	lsls	r1, r1, #9
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e02f      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9e>
 80019c8:	4ba9      	ldr	r3, [pc, #676]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4ba8      	ldr	r3, [pc, #672]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	49a9      	ldr	r1, [pc, #676]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4ba6      	ldr	r3, [pc, #664]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4ba5      	ldr	r3, [pc, #660]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019da:	49a7      	ldr	r1, [pc, #668]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e01e      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10e      	bne.n	8001a08 <HAL_RCC_OscConfig+0xc4>
 80019ea:	4ba1      	ldr	r3, [pc, #644]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4ba0      	ldr	r3, [pc, #640]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	02c9      	lsls	r1, r1, #11
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	4b9d      	ldr	r3, [pc, #628]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b9c      	ldr	r3, [pc, #624]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 8001a08:	4b99      	ldr	r3, [pc, #612]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b98      	ldr	r3, [pc, #608]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	4999      	ldr	r1, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x330>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	4997      	ldr	r1, [pc, #604]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f96a 	bl	8000d00 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a32:	f7ff f965 	bl	8000d00 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e28a      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0xee>
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff f955 	bl	8000d00 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f950 	bl	8000d00 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e275      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x118>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x146>
 8001a88:	e069      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8a:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	220c      	movs	r2, #12
 8001a90:	4013      	ands	r3, r2
 8001a92:	d00b      	beq.n	8001aac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	220c      	movs	r2, #12
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d11c      	bne.n	8001ada <HAL_RCC_OscConfig+0x196>
 8001aa0:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	025b      	lsls	r3, r3, #9
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d116      	bne.n	8001ada <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24b      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	22f8      	movs	r2, #248	; 0xf8
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	00da      	lsls	r2, r3, #3
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	e041      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff f907 	bl	8000d00 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f902 	bl	8000d00 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e227      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f1      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	22f8      	movs	r2, #248	; 0xf8
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00da      	lsls	r2, r3, #3
 8001b24:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	438a      	bics	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f8e2 	bl	8000d00 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f8dd 	bl	8000d00 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e202      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d1f1      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2208      	movs	r2, #8
 8001b64:	4013      	ands	r3, r2
 8001b66:	d036      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d019      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f8c0 	bl	8000d00 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8bb 	bl	8000d00 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1e0      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f1      	beq.n	8001b86 <HAL_RCC_OscConfig+0x242>
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f8a6 	bl	8000d00 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f8a1 	bl	8000d00 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1c6      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f1      	bne.n	8001bba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x29e>
 8001be0:	e0b4      	b.n	8001d4c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	201f      	movs	r0, #31
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	055b      	lsls	r3, r3, #21
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d110      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0549      	lsls	r1, r1, #21
 8001c00:	430a      	orrs	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d11a      	bne.n	8001c5a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0049      	lsls	r1, r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff f865 	bl	8000d00 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7ff f860 	bl	8000d00 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e185      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x33c>
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	621a      	str	r2, [r3, #32]
 8001c6e:	e035      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	fffeffff 	.word	0xfffeffff
 8001c78:	fffbffff 	.word	0xfffbffff
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x35e>
 8001c88:	4bb6      	ldr	r3, [pc, #728]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	4bb5      	ldr	r3, [pc, #724]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	621a      	str	r2, [r3, #32]
 8001c94:	4bb3      	ldr	r3, [pc, #716]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	4bb2      	ldr	r3, [pc, #712]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	621a      	str	r2, [r3, #32]
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x380>
 8001caa:	4bae      	ldr	r3, [pc, #696]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	4bad      	ldr	r3, [pc, #692]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	4bab      	ldr	r3, [pc, #684]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	4baa      	ldr	r3, [pc, #680]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	621a      	str	r2, [r3, #32]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x398>
 8001cc4:	4ba7      	ldr	r3, [pc, #668]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]
 8001cd0:	4ba4      	ldr	r3, [pc, #656]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	438a      	bics	r2, r1
 8001cda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d014      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f80c 	bl	8000d00 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	e009      	b.n	8001d02 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f807 	bl	8000d00 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a9b      	ldr	r2, [pc, #620]	; (8001f68 <HAL_RCC_OscConfig+0x624>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e12b      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	4b98      	ldr	r3, [pc, #608]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x3aa>
 8001d0c:	e013      	b.n	8001d36 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fff7 	bl	8000d00 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	e009      	b.n	8001d2c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7fe fff2 	bl	8000d00 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	4a91      	ldr	r2, [pc, #580]	; (8001f68 <HAL_RCC_OscConfig+0x624>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e116      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d46:	4989      	ldr	r1, [pc, #548]	; (8001f6c <HAL_RCC_OscConfig+0x628>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2210      	movs	r2, #16
 8001d52:	4013      	ands	r3, r2
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12a      	bne.n	8001db4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d64:	2104      	movs	r1, #4
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d6a:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7fe ffc3 	bl	8000d00 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d80:	f7fe ffbe 	bl	8000d00 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0e3      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f1      	beq.n	8001d80 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d9c:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	22f8      	movs	r2, #248	; 0xf8
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
 8001db2:	e034      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	3305      	adds	r3, #5
 8001dba:	d111      	bne.n	8001de0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	22f8      	movs	r2, #248	; 0xf8
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	00da      	lsls	r2, r3, #3
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001de0:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001de6:	2104      	movs	r1, #4
 8001de8:	430a      	orrs	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df0:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	438a      	bics	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ff82 	bl	8000d00 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e02:	f7fe ff7d 	bl	8000d00 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0a2      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f1      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4e4>
 8001e26:	e097      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	220c      	movs	r2, #12
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4f2>
 8001e34:	e06b      	b.n	8001f0e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d14c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <HAL_RCC_OscConfig+0x62c>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ff59 	bl	8000d00 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff54 	bl	8000d00 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e079      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	220f      	movs	r2, #15
 8001e78:	4393      	bics	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x630>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	0449      	lsls	r1, r1, #17
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff27 	bl	8000d00 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ff22 	bl	8000d00 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e047      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	049b      	lsls	r3, r3, #18
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x574>
 8001ed6:	e03f      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ede:	4924      	ldr	r1, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x62c>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff0c 	bl	8000d00 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe ff07 	bl	8000d00 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e02c      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	049b      	lsls	r3, r3, #18
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x5aa>
 8001f0c:	e024      	b.n	8001f58 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01f      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10e      	bne.n	8001f54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	220f      	movs	r2, #15
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	23f0      	movs	r3, #240	; 0xf0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b008      	add	sp, #32
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00001388 	.word	0x00001388
 8001f6c:	efffffff 	.word	0xefffffff
 8001f70:	feffffff 	.word	0xfeffffff
 8001f74:	ffc2ffff 	.word	0xffc2ffff

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b3      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d911      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d006      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fd8:	21e0      	movs	r1, #224	; 0xe0
 8001fda:	00c9      	lsls	r1, r1, #3
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	22f0      	movs	r2, #240	; 0xf0
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d114      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06e      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	049b      	lsls	r3, r3, #18
 8002026:	4013      	ands	r3, r2
 8002028:	d108      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e062      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e05b      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe fe56 	bl	8000d00 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	e009      	b.n	800206e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe fe51 	bl	8000d00 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_RCC_ClockConfig+0x18c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e042      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	220c      	movs	r2, #12
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1ec      	bne.n	800205a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d211      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x184>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_RCC_ClockConfig+0x190>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d0:	f000 f820 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d4:	0001      	movs	r1, r0
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x188>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	220f      	movs	r2, #15
 80020de:	4013      	ands	r3, r2
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x194>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	000a      	movs	r2, r1
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x198>)
 80020ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe fdc1 	bl	8000c74 <HAL_InitTick>
  
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	00001388 	.word	0x00001388
 8002108:	fffff8ff 	.word	0xfffff8ff
 800210c:	080043e0 	.word	0x080043e0
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	220c      	movs	r2, #12
 8002138:	4013      	ands	r3, r2
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x30>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
 8002142:	e02c      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	e02c      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	220f      	movs	r2, #15
 8002150:	4013      	ands	r3, r2
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	220f      	movs	r2, #15
 800215e:	4013      	ands	r3, r2
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	025b      	lsls	r3, r3, #9
 800216c:	4013      	ands	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002174:	f7fd ffd2 	bl	800011c <__udivsi3>
 8002178:	0003      	movs	r3, r0
 800217a:	001a      	movs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4353      	muls	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e009      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	000a      	movs	r2, r1
 8002188:	0152      	lsls	r2, r2, #5
 800218a:	1a52      	subs	r2, r2, r1
 800218c:	0193      	lsls	r3, r2, #6
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	185b      	adds	r3, r3, r1
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e002      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a0:	613b      	str	r3, [r7, #16]
      break;
 80021a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021a4:	693b      	ldr	r3, [r7, #16]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40021000 	.word	0x40021000
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	080043f8 	.word	0x080043f8
 80021bc:	08004408 	.word	0x08004408

080021c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021d8:	f7ff fff2 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021dc:	0001      	movs	r1, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	2207      	movs	r2, #7
 80021e6:	4013      	ands	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	000b      	movs	r3, r1
}    
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080043f0 	.word	0x080043f0

08002200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e042      	b.n	8002298 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	223d      	movs	r2, #61	; 0x3d
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	223c      	movs	r2, #60	; 0x3c
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0018      	movs	r0, r3
 800222a:	f7fe fba1 	bl	8000970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223d      	movs	r2, #61	; 0x3d
 8002232:	2102      	movs	r1, #2
 8002234:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	0019      	movs	r1, r3
 8002240:	0010      	movs	r0, r2
 8002242:	f000 f9a5 	bl	8002590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	223e      	movs	r2, #62	; 0x3e
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223f      	movs	r2, #63	; 0x3f
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2241      	movs	r2, #65	; 0x41
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2242      	movs	r2, #66	; 0x42
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2243      	movs	r2, #67	; 0x43
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2244      	movs	r2, #68	; 0x44
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2245      	movs	r2, #69	; 0x45
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223d      	movs	r2, #61	; 0x3d
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_TIM_PWM_Start+0x22>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	223e      	movs	r2, #62	; 0x3e
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	4193      	sbcs	r3, r2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	e01f      	b.n	8002302 <HAL_TIM_PWM_Start+0x62>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d108      	bne.n	80022da <HAL_TIM_PWM_Start+0x3a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4193      	sbcs	r3, r2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	e013      	b.n	8002302 <HAL_TIM_PWM_Start+0x62>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d108      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x52>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	5c9b      	ldrb	r3, [r3, r2]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	4193      	sbcs	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e007      	b.n	8002302 <HAL_TIM_PWM_Start+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2241      	movs	r2, #65	; 0x41
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	4193      	sbcs	r3, r2
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06e      	b.n	80023e8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0x7a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223e      	movs	r2, #62	; 0x3e
 8002314:	2102      	movs	r1, #2
 8002316:	5499      	strb	r1, [r3, r2]
 8002318:	e013      	b.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d104      	bne.n	800232a <HAL_TIM_PWM_Start+0x8a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	2102      	movs	r1, #2
 8002326:	5499      	strb	r1, [r3, r2]
 8002328:	e00b      	b.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d104      	bne.n	800233a <HAL_TIM_PWM_Start+0x9a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	2102      	movs	r1, #2
 8002336:	5499      	strb	r1, [r3, r2]
 8002338:	e003      	b.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2241      	movs	r2, #65	; 0x41
 800233e:	2102      	movs	r1, #2
 8002340:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fb92 	bl	8002a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_TIM_PWM_Start+0x150>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_TIM_PWM_Start+0xd8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_TIM_PWM_Start+0x154>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_TIM_PWM_Start+0xd8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_TIM_PWM_Start+0x158>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_TIM_PWM_Start+0xd8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_TIM_PWM_Start+0x15c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_TIM_PWM_Start+0xdc>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_TIM_PWM_Start+0xde>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0209      	lsls	r1, r1, #8
 8002390:	430a      	orrs	r2, r1
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_TIM_PWM_Start+0x150>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_TIM_PWM_Start+0x112>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_TIM_PWM_Start+0x160>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_TIM_PWM_Start+0x112>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_TIM_PWM_Start+0x154>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2207      	movs	r2, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d010      	beq.n	80023e6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d4:	e007      	b.n	80023e6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40014000 	.word	0x40014000
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40014800 	.word	0x40014800
 8002400:	40000400 	.word	0x40000400

08002404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2317      	movs	r3, #23
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	223c      	movs	r2, #60	; 0x3c
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002422:	2302      	movs	r3, #2
 8002424:	e0ad      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	223c      	movs	r2, #60	; 0x3c
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d100      	bne.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002434:	e076      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d900      	bls.n	800243e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800243c:	e095      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x166>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d04e      	beq.n	80024e2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d900      	bls.n	800244c <HAL_TIM_PWM_ConfigChannel+0x48>
 800244a:	e08e      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x166>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d021      	beq.n	800249c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002458:	e087      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	0011      	movs	r1, r2
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f90a 	bl	800267c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2108      	movs	r1, #8
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2104      	movs	r1, #4
 8002484:	438a      	bics	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6999      	ldr	r1, [r3, #24]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	619a      	str	r2, [r3, #24]
      break;
 800249a:	e06b      	b.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f971 	bl	800278c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	0109      	lsls	r1, r1, #4
 80024b8:	430a      	orrs	r2, r1
 80024ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4931      	ldr	r1, [pc, #196]	; (800258c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6999      	ldr	r1, [r3, #24]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	619a      	str	r2, [r3, #24]
      break;
 80024e0:	e048      	b.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f9d2 	bl	8002894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2108      	movs	r1, #8
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2104      	movs	r1, #4
 800250c:	438a      	bics	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69d9      	ldr	r1, [r3, #28]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	61da      	str	r2, [r3, #28]
      break;
 8002522:	e027      	b.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	0011      	movs	r1, r2
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fa37 	bl	80029a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0109      	lsls	r1, r1, #4
 8002540:	430a      	orrs	r2, r1
 8002542:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	490f      	ldr	r1, [pc, #60]	; (800258c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002550:	400a      	ands	r2, r1
 8002552:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69d9      	ldr	r1, [r3, #28]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	021a      	lsls	r2, r3, #8
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
      break;
 8002568:	e004      	b.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800256a:	2317      	movs	r3, #23
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	223c      	movs	r2, #60	; 0x3c
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]

  return status;
 800257c:	2317      	movs	r3, #23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	fffffbff 	.word	0xfffffbff

08002590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0x20>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <TIM_Base_SetConfig+0xd4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2270      	movs	r2, #112	; 0x70
 80025b4:	4393      	bics	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <TIM_Base_SetConfig+0xd4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <TIM_Base_SetConfig+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <TIM_Base_SetConfig+0xdc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <TIM_Base_SetConfig+0xe8>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	4393      	bics	r3, r2
 800260a:	001a      	movs	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00b      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <TIM_Base_SetConfig+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d103      	bne.n	8002652 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	615a      	str	r2, [r3, #20]
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b004      	add	sp, #16
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40002000 	.word	0x40002000
 800266c:	40014000 	.word	0x40014000
 8002670:	40014400 	.word	0x40014400
 8002674:	40014800 	.word	0x40014800
 8002678:	fffffcff 	.word	0xfffffcff

0800267c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2201      	movs	r2, #1
 800268c:	4393      	bics	r3, r2
 800268e:	001a      	movs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2270      	movs	r2, #112	; 0x70
 80026aa:	4393      	bics	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2203      	movs	r2, #3
 80026b2:	4393      	bics	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4393      	bics	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <TIM_OC1_SetConfig+0xf8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_OC1_SetConfig+0x76>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <TIM_OC1_SetConfig+0xfc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_OC1_SetConfig+0x76>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <TIM_OC1_SetConfig+0x100>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_OC1_SetConfig+0x76>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <TIM_OC1_SetConfig+0x104>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10c      	bne.n	800270c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2208      	movs	r2, #8
 80026f6:	4393      	bics	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2204      	movs	r2, #4
 8002708:	4393      	bics	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <TIM_OC1_SetConfig+0xf8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <TIM_OC1_SetConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <TIM_OC1_SetConfig+0xfc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_OC1_SetConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <TIM_OC1_SetConfig+0x100>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_OC1_SetConfig+0xb0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a16      	ldr	r2, [pc, #88]	; (8002780 <TIM_OC1_SetConfig+0x104>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d111      	bne.n	8002750 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4a15      	ldr	r2, [pc, #84]	; (8002784 <TIM_OC1_SetConfig+0x108>)
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <TIM_OC1_SetConfig+0x10c>)
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b006      	add	sp, #24
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800
 8002784:	fffffeff 	.word	0xfffffeff
 8002788:	fffffdff 	.word	0xfffffdff

0800278c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	2210      	movs	r2, #16
 800279c:	4393      	bics	r3, r2
 800279e:	001a      	movs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a2e      	ldr	r2, [pc, #184]	; (8002874 <TIM_OC2_SetConfig+0xe8>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <TIM_OC2_SetConfig+0xec>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4393      	bics	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <TIM_OC2_SetConfig+0xf0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10d      	bne.n	800280a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	4393      	bics	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	4393      	bics	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <TIM_OC2_SetConfig+0xf0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <TIM_OC2_SetConfig+0x9e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <TIM_OC2_SetConfig+0xf4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <TIM_OC2_SetConfig+0x9e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <TIM_OC2_SetConfig+0xf8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_OC2_SetConfig+0x9e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <TIM_OC2_SetConfig+0xfc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4a17      	ldr	r2, [pc, #92]	; (800288c <TIM_OC2_SetConfig+0x100>)
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <TIM_OC2_SetConfig+0x104>)
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	621a      	str	r2, [r3, #32]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b006      	add	sp, #24
 8002872:	bd80      	pop	{r7, pc}
 8002874:	ffff8fff 	.word	0xffff8fff
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40014000 	.word	0x40014000
 8002884:	40014400 	.word	0x40014400
 8002888:	40014800 	.word	0x40014800
 800288c:	fffffbff 	.word	0xfffffbff
 8002890:	fffff7ff 	.word	0xfffff7ff

08002894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a35      	ldr	r2, [pc, #212]	; (8002978 <TIM_OC3_SetConfig+0xe4>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2270      	movs	r2, #112	; 0x70
 80028c0:	4393      	bics	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2203      	movs	r2, #3
 80028c8:	4393      	bics	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a28      	ldr	r2, [pc, #160]	; (800297c <TIM_OC3_SetConfig+0xe8>)
 80028da:	4013      	ands	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a24      	ldr	r2, [pc, #144]	; (8002980 <TIM_OC3_SetConfig+0xec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10d      	bne.n	800290e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <TIM_OC3_SetConfig+0xf0>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <TIM_OC3_SetConfig+0xf4>)
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <TIM_OC3_SetConfig+0xec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_OC3_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <TIM_OC3_SetConfig+0xf8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_OC3_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <TIM_OC3_SetConfig+0xfc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_OC3_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <TIM_OC3_SetConfig+0x100>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d113      	bne.n	8002956 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <TIM_OC3_SetConfig+0x104>)
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <TIM_OC3_SetConfig+0x108>)
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	621a      	str	r2, [r3, #32]
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b006      	add	sp, #24
 8002976:	bd80      	pop	{r7, pc}
 8002978:	fffffeff 	.word	0xfffffeff
 800297c:	fffffdff 	.word	0xfffffdff
 8002980:	40012c00 	.word	0x40012c00
 8002984:	fffff7ff 	.word	0xfffff7ff
 8002988:	fffffbff 	.word	0xfffffbff
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800
 8002998:	ffffefff 	.word	0xffffefff
 800299c:	ffffdfff 	.word	0xffffdfff

080029a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <TIM_OC4_SetConfig+0xb0>)
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <TIM_OC4_SetConfig+0xb4>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <TIM_OC4_SetConfig+0xb8>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <TIM_OC4_SetConfig+0xbc>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	031b      	lsls	r3, r3, #12
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <TIM_OC4_SetConfig+0xc0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_OC4_SetConfig+0x78>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <TIM_OC4_SetConfig+0xc4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_OC4_SetConfig+0x78>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <TIM_OC4_SetConfig+0xc8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_OC4_SetConfig+0x78>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <TIM_OC4_SetConfig+0xcc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d109      	bne.n	8002a2c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <TIM_OC4_SetConfig+0xd0>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	ffffefff 	.word	0xffffefff
 8002a54:	ffff8fff 	.word	0xffff8fff
 8002a58:	fffffcff 	.word	0xfffffcff
 8002a5c:	ffffdfff 	.word	0xffffdfff
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	40014800 	.word	0x40014800
 8002a70:	ffffbfff 	.word	0xffffbfff

08002a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	221f      	movs	r2, #31
 8002a84:	4013      	ands	r3, r2
 8002a86:	2201      	movs	r2, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	0013      	movs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	43d2      	mvns	r2, r2
 8002a96:	401a      	ands	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	211f      	movs	r1, #31
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4099      	lsls	r1, r3
 8002aaa:	000b      	movs	r3, r1
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b006      	add	sp, #24
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223c      	movs	r2, #60	; 0x3c
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e041      	b.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223c      	movs	r2, #60	; 0x3c
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	223d      	movs	r2, #61	; 0x3d
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2270      	movs	r2, #112	; 0x70
 8002af8:	4393      	bics	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10c      	bne.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	4393      	bics	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223d      	movs	r2, #61	; 0x3d
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223c      	movs	r2, #60	; 0x3c
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40014000 	.word	0x40014000

08002b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e044      	b.n	8002c08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2278      	movs	r2, #120	; 0x78
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fd ff49 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2224      	movs	r2, #36	; 0x24
 8002b9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	438a      	bics	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f8d0 	bl	8002d54 <UART_SetConfig>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e024      	b.n	8002c08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa03 	bl	8002fd4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	490d      	ldr	r1, [pc, #52]	; (8002c10 <HAL_UART_Init+0xa4>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2108      	movs	r1, #8
 8002bea:	438a      	bics	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 fa9b 	bl	800313c <UART_CheckIdleState>
 8002c06:	0003      	movs	r3, r0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	fffff7ff 	.word	0xfffff7ff

08002c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d000      	beq.n	8002c2e <HAL_UART_Transmit+0x1a>
 8002c2c:	e08d      	b.n	8002d4a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_UART_Transmit+0x28>
 8002c34:	1dbb      	adds	r3, r7, #6
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e085      	b.n	8002d4c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	015b      	lsls	r3, r3, #5
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d109      	bne.n	8002c60 <HAL_UART_Transmit+0x4c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e075      	b.n	8002d4c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2284      	movs	r2, #132	; 0x84
 8002c64:	2100      	movs	r1, #0
 8002c66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2221      	movs	r2, #33	; 0x21
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe f847 	bl	8000d00 <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1dba      	adds	r2, r7, #6
 8002c7a:	2150      	movs	r1, #80	; 0x50
 8002c7c:	8812      	ldrh	r2, [r2, #0]
 8002c7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1dba      	adds	r2, r7, #6
 8002c84:	2152      	movs	r1, #82	; 0x52
 8002c86:	8812      	ldrh	r2, [r2, #0]
 8002c88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	015b      	lsls	r3, r3, #5
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d108      	bne.n	8002ca8 <HAL_UART_Transmit+0x94>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e003      	b.n	8002cb0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cb0:	e030      	b.n	8002d14 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	0013      	movs	r3, r2
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	f000 fae4 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e03c      	b.n	8002d4c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	05d2      	lsls	r2, r2, #23
 8002ce2:	0dd2      	lsrs	r2, r2, #23
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	3302      	adds	r3, #2
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e008      	b.n	8002d02 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2252      	movs	r2, #82	; 0x52
 8002d06:	5a9b      	ldrh	r3, [r3, r2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b299      	uxth	r1, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2252      	movs	r2, #82	; 0x52
 8002d12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2252      	movs	r2, #82	; 0x52
 8002d18:	5a9b      	ldrh	r3, [r3, r2]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1c8      	bne.n	8002cb2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	0013      	movs	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	f000 faad 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e005      	b.n	8002d4c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b008      	add	sp, #32
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5c:	231e      	movs	r3, #30
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a8d      	ldr	r2, [pc, #564]	; (8002fb8 <UART_SetConfig+0x264>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a88      	ldr	r2, [pc, #544]	; (8002fbc <UART_SetConfig+0x268>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a7f      	ldr	r2, [pc, #508]	; (8002fc0 <UART_SetConfig+0x26c>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7b      	ldr	r2, [pc, #492]	; (8002fc4 <UART_SetConfig+0x270>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d127      	bne.n	8002e2a <UART_SetConfig+0xd6>
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <UART_SetConfig+0x274>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	2203      	movs	r2, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d00d      	beq.n	8002e02 <UART_SetConfig+0xae>
 8002de6:	d81b      	bhi.n	8002e20 <UART_SetConfig+0xcc>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d014      	beq.n	8002e16 <UART_SetConfig+0xc2>
 8002dec:	d818      	bhi.n	8002e20 <UART_SetConfig+0xcc>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <UART_SetConfig+0xa4>
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d00a      	beq.n	8002e0c <UART_SetConfig+0xb8>
 8002df6:	e013      	b.n	8002e20 <UART_SetConfig+0xcc>
 8002df8:	231f      	movs	r3, #31
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e021      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e02:	231f      	movs	r3, #31
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e01c      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2204      	movs	r2, #4
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e017      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e16:	231f      	movs	r3, #31
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e012      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e20:	231f      	movs	r3, #31
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2210      	movs	r2, #16
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e00d      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a67      	ldr	r2, [pc, #412]	; (8002fcc <UART_SetConfig+0x278>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d104      	bne.n	8002e3e <UART_SetConfig+0xea>
 8002e34:	231f      	movs	r3, #31
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e003      	b.n	8002e46 <UART_SetConfig+0xf2>
 8002e3e:	231f      	movs	r3, #31
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2210      	movs	r2, #16
 8002e44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d15c      	bne.n	8002f0c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002e52:	231f      	movs	r3, #31
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d015      	beq.n	8002e88 <UART_SetConfig+0x134>
 8002e5c:	dc18      	bgt.n	8002e90 <UART_SetConfig+0x13c>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d00d      	beq.n	8002e7e <UART_SetConfig+0x12a>
 8002e62:	dc15      	bgt.n	8002e90 <UART_SetConfig+0x13c>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <UART_SetConfig+0x11a>
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d005      	beq.n	8002e78 <UART_SetConfig+0x124>
 8002e6c:	e010      	b.n	8002e90 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6e:	f7ff f9b1 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8002e72:	0003      	movs	r3, r0
 8002e74:	61bb      	str	r3, [r7, #24]
        break;
 8002e76:	e012      	b.n	8002e9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e78:	4b55      	ldr	r3, [pc, #340]	; (8002fd0 <UART_SetConfig+0x27c>)
 8002e7a:	61bb      	str	r3, [r7, #24]
        break;
 8002e7c:	e00f      	b.n	8002e9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7e:	f7ff f949 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8002e82:	0003      	movs	r3, r0
 8002e84:	61bb      	str	r3, [r7, #24]
        break;
 8002e86:	e00a      	b.n	8002e9e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	61bb      	str	r3, [r7, #24]
        break;
 8002e8e:	e006      	b.n	8002e9e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e94:	231e      	movs	r3, #30
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
        break;
 8002e9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d100      	bne.n	8002ea6 <UART_SetConfig+0x152>
 8002ea4:	e07a      	b.n	8002f9c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	18d2      	adds	r2, r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	0010      	movs	r0, r2
 8002eba:	f7fd f92f 	bl	800011c <__udivsi3>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d91c      	bls.n	8002f02 <UART_SetConfig+0x1ae>
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	025b      	lsls	r3, r3, #9
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d217      	bcs.n	8002f02 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	200e      	movs	r0, #14
 8002ed8:	183b      	adds	r3, r7, r0
 8002eda:	210f      	movs	r1, #15
 8002edc:	438a      	bics	r2, r1
 8002ede:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b299      	uxth	r1, r3
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	183a      	adds	r2, r7, r0
 8002ef0:	8812      	ldrh	r2, [r2, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	183a      	adds	r2, r7, r0
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	e04c      	b.n	8002f9c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002f02:	231e      	movs	r3, #30
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e047      	b.n	8002f9c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f0c:	231f      	movs	r3, #31
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d015      	beq.n	8002f42 <UART_SetConfig+0x1ee>
 8002f16:	dc18      	bgt.n	8002f4a <UART_SetConfig+0x1f6>
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00d      	beq.n	8002f38 <UART_SetConfig+0x1e4>
 8002f1c:	dc15      	bgt.n	8002f4a <UART_SetConfig+0x1f6>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <UART_SetConfig+0x1d4>
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d005      	beq.n	8002f32 <UART_SetConfig+0x1de>
 8002f26:	e010      	b.n	8002f4a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7ff f954 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	61bb      	str	r3, [r7, #24]
        break;
 8002f30:	e012      	b.n	8002f58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <UART_SetConfig+0x27c>)
 8002f34:	61bb      	str	r3, [r7, #24]
        break;
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f38:	f7ff f8ec 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
        break;
 8002f40:	e00a      	b.n	8002f58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e006      	b.n	8002f58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f4e:	231e      	movs	r3, #30
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01e      	beq.n	8002f9c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	085a      	lsrs	r2, r3, #1
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	18d2      	adds	r2, r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f7fd f8d4 	bl	800011c <__udivsi3>
 8002f74:	0003      	movs	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d90a      	bls.n	8002f94 <UART_SetConfig+0x240>
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d205      	bcs.n	8002f94 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e003      	b.n	8002f9c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	231e      	movs	r3, #30
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fa8:	231e      	movs	r3, #30
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	781b      	ldrb	r3, [r3, #0]
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b008      	add	sp, #32
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	ffff69f3 	.word	0xffff69f3
 8002fbc:	ffffcfff 	.word	0xffffcfff
 8002fc0:	fffff4ff 	.word	0xfffff4ff
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <UART_AdvFeatureConfig+0x144>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d00b      	beq.n	8003020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a43      	ldr	r2, [pc, #268]	; (800311c <UART_AdvFeatureConfig+0x148>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2204      	movs	r2, #4
 8003026:	4013      	ands	r3, r2
 8003028:	d00b      	beq.n	8003042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <UART_AdvFeatureConfig+0x14c>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2208      	movs	r2, #8
 8003048:	4013      	ands	r3, r2
 800304a:	d00b      	beq.n	8003064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a34      	ldr	r2, [pc, #208]	; (8003124 <UART_AdvFeatureConfig+0x150>)
 8003054:	4013      	ands	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2210      	movs	r2, #16
 800306a:	4013      	ands	r3, r2
 800306c:	d00b      	beq.n	8003086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <UART_AdvFeatureConfig+0x154>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2220      	movs	r2, #32
 800308c:	4013      	ands	r3, r2
 800308e:	d00b      	beq.n	80030a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4a25      	ldr	r2, [pc, #148]	; (800312c <UART_AdvFeatureConfig+0x158>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	4013      	ands	r3, r2
 80030b0:	d01d      	beq.n	80030ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <UART_AdvFeatureConfig+0x15c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	035b      	lsls	r3, r3, #13
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10b      	bne.n	80030ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <UART_AdvFeatureConfig+0x160>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00b      	beq.n	8003110 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <UART_AdvFeatureConfig+0x164>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	fffdffff 	.word	0xfffdffff
 800311c:	fffeffff 	.word	0xfffeffff
 8003120:	fffbffff 	.word	0xfffbffff
 8003124:	ffff7fff 	.word	0xffff7fff
 8003128:	ffffefff 	.word	0xffffefff
 800312c:	ffffdfff 	.word	0xffffdfff
 8003130:	ffefffff 	.word	0xffefffff
 8003134:	ff9fffff 	.word	0xff9fffff
 8003138:	fff7ffff 	.word	0xfff7ffff

0800313c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b092      	sub	sp, #72	; 0x48
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2284      	movs	r2, #132	; 0x84
 8003148:	2100      	movs	r1, #0
 800314a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800314c:	f7fd fdd8 	bl	8000d00 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2208      	movs	r2, #8
 800315c:	4013      	ands	r3, r2
 800315e:	2b08      	cmp	r3, #8
 8003160:	d12c      	bne.n	80031bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	0391      	lsls	r1, r2, #14
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4a46      	ldr	r2, [pc, #280]	; (8003284 <UART_CheckIdleState+0x148>)
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	f000 f88c 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d021      	beq.n	80031bc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
 8003182:	2301      	movs	r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2278      	movs	r2, #120	; 0x78
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e05f      	b.n	800327c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2204      	movs	r2, #4
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d146      	bne.n	8003258 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	03d1      	lsls	r1, r2, #15
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <UART_CheckIdleState+0x148>)
 80031d4:	9200      	str	r2, [sp, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f000 f858 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d03b      	beq.n	8003258 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e0:	f3ef 8310 	mrs	r3, PRIMASK
 80031e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	2301      	movs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4921      	ldr	r1, [pc, #132]	; (8003288 <UART_CheckIdleState+0x14c>)
 8003202:	400a      	ands	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003212:	f3ef 8310 	mrs	r3, PRIMASK
 8003216:	61bb      	str	r3, [r7, #24]
  return(result);
 8003218:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	438a      	bics	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	2120      	movs	r1, #32
 800324a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2278      	movs	r2, #120	; 0x78
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e011      	b.n	800327c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	2120      	movs	r1, #32
 8003264:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2278      	movs	r2, #120	; 0x78
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b010      	add	sp, #64	; 0x40
 8003282:	bd80      	pop	{r7, pc}
 8003284:	01ffffff 	.word	0x01ffffff
 8003288:	fffffedf 	.word	0xfffffedf

0800328c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	e04b      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d048      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fd fd2c 	bl	8000d00 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04b      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2204      	movs	r2, #4
 80032c6:	4013      	ands	r3, r2
 80032c8:	d035      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2208      	movs	r2, #8
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d111      	bne.n	80032fc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2208      	movs	r2, #8
 80032de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f83c 	bl	8003360 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2284      	movs	r2, #132	; 0x84
 80032ec:	2108      	movs	r1, #8
 80032ee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2278      	movs	r2, #120	; 0x78
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e02c      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	401a      	ands	r2, r3
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	429a      	cmp	r2, r3
 800330e:	d112      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f81f 	bl	8003360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2284      	movs	r2, #132	; 0x84
 8003326:	2120      	movs	r1, #32
 8003328:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2278      	movs	r2, #120	; 0x78
 800332e:	2100      	movs	r1, #0
 8003330:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	425a      	negs	r2, r3
 8003346:	4153      	adcs	r3, r2
 8003348:	b2db      	uxtb	r3, r3
 800334a:	001a      	movs	r2, r3
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d0a4      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003368:	f3ef 8310 	mrs	r3, PRIMASK
 800336c:	617b      	str	r3, [r7, #20]
  return(result);
 800336e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f383 8810 	msr	PRIMASK, r3
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4926      	ldr	r1, [pc, #152]	; (8003424 <UART_EndRxTransfer+0xc4>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	623b      	str	r3, [r7, #32]
  return(result);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d118      	bne.n	8003406 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033de:	2301      	movs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2110      	movs	r1, #16
 80033f6:	438a      	bics	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	2120      	movs	r1, #32
 800340c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	669a      	str	r2, [r3, #104]	; 0x68
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b00e      	add	sp, #56	; 0x38
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	fffffedf 	.word	0xfffffedf

08003428 <std>:
 8003428:	2300      	movs	r3, #0
 800342a:	b510      	push	{r4, lr}
 800342c:	0004      	movs	r4, r0
 800342e:	6003      	str	r3, [r0, #0]
 8003430:	6043      	str	r3, [r0, #4]
 8003432:	6083      	str	r3, [r0, #8]
 8003434:	8181      	strh	r1, [r0, #12]
 8003436:	6643      	str	r3, [r0, #100]	; 0x64
 8003438:	81c2      	strh	r2, [r0, #14]
 800343a:	6103      	str	r3, [r0, #16]
 800343c:	6143      	str	r3, [r0, #20]
 800343e:	6183      	str	r3, [r0, #24]
 8003440:	0019      	movs	r1, r3
 8003442:	2208      	movs	r2, #8
 8003444:	305c      	adds	r0, #92	; 0x5c
 8003446:	f000 fa15 	bl	8003874 <memset>
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <std+0x50>)
 800344c:	6224      	str	r4, [r4, #32]
 800344e:	6263      	str	r3, [r4, #36]	; 0x24
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <std+0x54>)
 8003452:	62a3      	str	r3, [r4, #40]	; 0x28
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <std+0x58>)
 8003456:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <std+0x5c>)
 800345a:	6323      	str	r3, [r4, #48]	; 0x30
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <std+0x60>)
 800345e:	429c      	cmp	r4, r3
 8003460:	d005      	beq.n	800346e <std+0x46>
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <std+0x64>)
 8003464:	429c      	cmp	r4, r3
 8003466:	d002      	beq.n	800346e <std+0x46>
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <std+0x68>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d103      	bne.n	8003476 <std+0x4e>
 800346e:	0020      	movs	r0, r4
 8003470:	3058      	adds	r0, #88	; 0x58
 8003472:	f000 fa7f 	bl	8003974 <__retarget_lock_init_recursive>
 8003476:	bd10      	pop	{r4, pc}
 8003478:	08003691 	.word	0x08003691
 800347c:	080036b9 	.word	0x080036b9
 8003480:	080036f1 	.word	0x080036f1
 8003484:	0800371d 	.word	0x0800371d
 8003488:	2000019c 	.word	0x2000019c
 800348c:	20000204 	.word	0x20000204
 8003490:	2000026c 	.word	0x2000026c

08003494 <stdio_exit_handler>:
 8003494:	b510      	push	{r4, lr}
 8003496:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <stdio_exit_handler+0x10>)
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <stdio_exit_handler+0x14>)
 800349a:	4804      	ldr	r0, [pc, #16]	; (80034ac <stdio_exit_handler+0x18>)
 800349c:	f000 f86c 	bl	8003578 <_fwalk_sglue>
 80034a0:	bd10      	pop	{r4, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	08004215 	.word	0x08004215
 80034ac:	20000018 	.word	0x20000018

080034b0 <cleanup_stdio>:
 80034b0:	6841      	ldr	r1, [r0, #4]
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <cleanup_stdio+0x30>)
 80034b4:	b510      	push	{r4, lr}
 80034b6:	0004      	movs	r4, r0
 80034b8:	4299      	cmp	r1, r3
 80034ba:	d001      	beq.n	80034c0 <cleanup_stdio+0x10>
 80034bc:	f000 feaa 	bl	8004214 <_fflush_r>
 80034c0:	68a1      	ldr	r1, [r4, #8]
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <cleanup_stdio+0x34>)
 80034c4:	4299      	cmp	r1, r3
 80034c6:	d002      	beq.n	80034ce <cleanup_stdio+0x1e>
 80034c8:	0020      	movs	r0, r4
 80034ca:	f000 fea3 	bl	8004214 <_fflush_r>
 80034ce:	68e1      	ldr	r1, [r4, #12]
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <cleanup_stdio+0x38>)
 80034d2:	4299      	cmp	r1, r3
 80034d4:	d002      	beq.n	80034dc <cleanup_stdio+0x2c>
 80034d6:	0020      	movs	r0, r4
 80034d8:	f000 fe9c 	bl	8004214 <_fflush_r>
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	2000019c 	.word	0x2000019c
 80034e4:	20000204 	.word	0x20000204
 80034e8:	2000026c 	.word	0x2000026c

080034ec <global_stdio_init.part.0>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <global_stdio_init.part.0+0x28>)
 80034f0:	4a09      	ldr	r2, [pc, #36]	; (8003518 <global_stdio_init.part.0+0x2c>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <global_stdio_init.part.0+0x30>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	f7ff ff95 	bl	8003428 <std>
 80034fe:	2201      	movs	r2, #1
 8003500:	2109      	movs	r1, #9
 8003502:	4807      	ldr	r0, [pc, #28]	; (8003520 <global_stdio_init.part.0+0x34>)
 8003504:	f7ff ff90 	bl	8003428 <std>
 8003508:	2202      	movs	r2, #2
 800350a:	2112      	movs	r1, #18
 800350c:	4805      	ldr	r0, [pc, #20]	; (8003524 <global_stdio_init.part.0+0x38>)
 800350e:	f7ff ff8b 	bl	8003428 <std>
 8003512:	bd10      	pop	{r4, pc}
 8003514:	200002d4 	.word	0x200002d4
 8003518:	08003495 	.word	0x08003495
 800351c:	2000019c 	.word	0x2000019c
 8003520:	20000204 	.word	0x20000204
 8003524:	2000026c 	.word	0x2000026c

08003528 <__sfp_lock_acquire>:
 8003528:	b510      	push	{r4, lr}
 800352a:	4802      	ldr	r0, [pc, #8]	; (8003534 <__sfp_lock_acquire+0xc>)
 800352c:	f000 fa23 	bl	8003976 <__retarget_lock_acquire_recursive>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	200002dd 	.word	0x200002dd

08003538 <__sfp_lock_release>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4802      	ldr	r0, [pc, #8]	; (8003544 <__sfp_lock_release+0xc>)
 800353c:	f000 fa1c 	bl	8003978 <__retarget_lock_release_recursive>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	200002dd 	.word	0x200002dd

08003548 <__sinit>:
 8003548:	b510      	push	{r4, lr}
 800354a:	0004      	movs	r4, r0
 800354c:	f7ff ffec 	bl	8003528 <__sfp_lock_acquire>
 8003550:	6a23      	ldr	r3, [r4, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <__sinit+0x14>
 8003556:	f7ff ffef 	bl	8003538 <__sfp_lock_release>
 800355a:	bd10      	pop	{r4, pc}
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <__sinit+0x28>)
 800355e:	6223      	str	r3, [r4, #32]
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__sinit+0x2c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f6      	bne.n	8003556 <__sinit+0xe>
 8003568:	f7ff ffc0 	bl	80034ec <global_stdio_init.part.0>
 800356c:	e7f3      	b.n	8003556 <__sinit+0xe>
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	080034b1 	.word	0x080034b1
 8003574:	200002d4 	.word	0x200002d4

08003578 <_fwalk_sglue>:
 8003578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800357a:	0014      	movs	r4, r2
 800357c:	2600      	movs	r6, #0
 800357e:	9000      	str	r0, [sp, #0]
 8003580:	9101      	str	r1, [sp, #4]
 8003582:	68a5      	ldr	r5, [r4, #8]
 8003584:	6867      	ldr	r7, [r4, #4]
 8003586:	3f01      	subs	r7, #1
 8003588:	d504      	bpl.n	8003594 <_fwalk_sglue+0x1c>
 800358a:	6824      	ldr	r4, [r4, #0]
 800358c:	2c00      	cmp	r4, #0
 800358e:	d1f8      	bne.n	8003582 <_fwalk_sglue+0xa>
 8003590:	0030      	movs	r0, r6
 8003592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003594:	89ab      	ldrh	r3, [r5, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d908      	bls.n	80035ac <_fwalk_sglue+0x34>
 800359a:	220e      	movs	r2, #14
 800359c:	5eab      	ldrsh	r3, [r5, r2]
 800359e:	3301      	adds	r3, #1
 80035a0:	d004      	beq.n	80035ac <_fwalk_sglue+0x34>
 80035a2:	0029      	movs	r1, r5
 80035a4:	9800      	ldr	r0, [sp, #0]
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	4798      	blx	r3
 80035aa:	4306      	orrs	r6, r0
 80035ac:	3568      	adds	r5, #104	; 0x68
 80035ae:	e7ea      	b.n	8003586 <_fwalk_sglue+0xe>

080035b0 <iprintf>:
 80035b0:	b40f      	push	{r0, r1, r2, r3}
 80035b2:	b507      	push	{r0, r1, r2, lr}
 80035b4:	4905      	ldr	r1, [pc, #20]	; (80035cc <iprintf+0x1c>)
 80035b6:	ab04      	add	r3, sp, #16
 80035b8:	6808      	ldr	r0, [r1, #0]
 80035ba:	cb04      	ldmia	r3!, {r2}
 80035bc:	6881      	ldr	r1, [r0, #8]
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	f000 fb02 	bl	8003bc8 <_vfiprintf_r>
 80035c4:	b003      	add	sp, #12
 80035c6:	bc08      	pop	{r3}
 80035c8:	b004      	add	sp, #16
 80035ca:	4718      	bx	r3
 80035cc:	20000064 	.word	0x20000064

080035d0 <_puts_r>:
 80035d0:	6a03      	ldr	r3, [r0, #32]
 80035d2:	b570      	push	{r4, r5, r6, lr}
 80035d4:	0005      	movs	r5, r0
 80035d6:	000e      	movs	r6, r1
 80035d8:	6884      	ldr	r4, [r0, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <_puts_r+0x12>
 80035de:	f7ff ffb3 	bl	8003548 <__sinit>
 80035e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035e4:	07db      	lsls	r3, r3, #31
 80035e6:	d405      	bmi.n	80035f4 <_puts_r+0x24>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	059b      	lsls	r3, r3, #22
 80035ec:	d402      	bmi.n	80035f4 <_puts_r+0x24>
 80035ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f0:	f000 f9c1 	bl	8003976 <__retarget_lock_acquire_recursive>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	071b      	lsls	r3, r3, #28
 80035f8:	d502      	bpl.n	8003600 <_puts_r+0x30>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11f      	bne.n	8003640 <_puts_r+0x70>
 8003600:	0021      	movs	r1, r4
 8003602:	0028      	movs	r0, r5
 8003604:	f000 f8d2 	bl	80037ac <__swsetup_r>
 8003608:	2800      	cmp	r0, #0
 800360a:	d019      	beq.n	8003640 <_puts_r+0x70>
 800360c:	2501      	movs	r5, #1
 800360e:	426d      	negs	r5, r5
 8003610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003612:	07db      	lsls	r3, r3, #31
 8003614:	d405      	bmi.n	8003622 <_puts_r+0x52>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	059b      	lsls	r3, r3, #22
 800361a:	d402      	bmi.n	8003622 <_puts_r+0x52>
 800361c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361e:	f000 f9ab 	bl	8003978 <__retarget_lock_release_recursive>
 8003622:	0028      	movs	r0, r5
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	3601      	adds	r6, #1
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	da04      	bge.n	8003638 <_puts_r+0x68>
 800362e:	69a2      	ldr	r2, [r4, #24]
 8003630:	429a      	cmp	r2, r3
 8003632:	dc16      	bgt.n	8003662 <_puts_r+0x92>
 8003634:	290a      	cmp	r1, #10
 8003636:	d014      	beq.n	8003662 <_puts_r+0x92>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	6022      	str	r2, [r4, #0]
 800363e:	7019      	strb	r1, [r3, #0]
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	7831      	ldrb	r1, [r6, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	2900      	cmp	r1, #0
 8003648:	d1ed      	bne.n	8003626 <_puts_r+0x56>
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da0f      	bge.n	8003670 <_puts_r+0xa0>
 8003650:	0028      	movs	r0, r5
 8003652:	0022      	movs	r2, r4
 8003654:	310a      	adds	r1, #10
 8003656:	f000 f867 	bl	8003728 <__swbuf_r>
 800365a:	250a      	movs	r5, #10
 800365c:	3001      	adds	r0, #1
 800365e:	d1d7      	bne.n	8003610 <_puts_r+0x40>
 8003660:	e7d4      	b.n	800360c <_puts_r+0x3c>
 8003662:	0022      	movs	r2, r4
 8003664:	0028      	movs	r0, r5
 8003666:	f000 f85f 	bl	8003728 <__swbuf_r>
 800366a:	3001      	adds	r0, #1
 800366c:	d1e8      	bne.n	8003640 <_puts_r+0x70>
 800366e:	e7cd      	b.n	800360c <_puts_r+0x3c>
 8003670:	250a      	movs	r5, #10
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	6022      	str	r2, [r4, #0]
 8003678:	701d      	strb	r5, [r3, #0]
 800367a:	e7c9      	b.n	8003610 <_puts_r+0x40>

0800367c <puts>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4b03      	ldr	r3, [pc, #12]	; (800368c <puts+0x10>)
 8003680:	0001      	movs	r1, r0
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	f7ff ffa4 	bl	80035d0 <_puts_r>
 8003688:	bd10      	pop	{r4, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20000064 	.word	0x20000064

08003690 <__sread>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	000c      	movs	r4, r1
 8003694:	250e      	movs	r5, #14
 8003696:	5f49      	ldrsh	r1, [r1, r5]
 8003698:	f000 f91a 	bl	80038d0 <_read_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	db03      	blt.n	80036a8 <__sread+0x18>
 80036a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036a2:	181b      	adds	r3, r3, r0
 80036a4:	6563      	str	r3, [r4, #84]	; 0x54
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	4a02      	ldr	r2, [pc, #8]	; (80036b4 <__sread+0x24>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	e7f9      	b.n	80036a6 <__sread+0x16>
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	ffffefff 	.word	0xffffefff

080036b8 <__swrite>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	001f      	movs	r7, r3
 80036bc:	898b      	ldrh	r3, [r1, #12]
 80036be:	0005      	movs	r5, r0
 80036c0:	000c      	movs	r4, r1
 80036c2:	0016      	movs	r6, r2
 80036c4:	05db      	lsls	r3, r3, #23
 80036c6:	d505      	bpl.n	80036d4 <__swrite+0x1c>
 80036c8:	230e      	movs	r3, #14
 80036ca:	5ec9      	ldrsh	r1, [r1, r3]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2302      	movs	r3, #2
 80036d0:	f000 f8ea 	bl	80038a8 <_lseek_r>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	4a05      	ldr	r2, [pc, #20]	; (80036ec <__swrite+0x34>)
 80036d8:	0028      	movs	r0, r5
 80036da:	4013      	ands	r3, r2
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	0032      	movs	r2, r6
 80036e0:	230e      	movs	r3, #14
 80036e2:	5ee1      	ldrsh	r1, [r4, r3]
 80036e4:	003b      	movs	r3, r7
 80036e6:	f000 f907 	bl	80038f8 <_write_r>
 80036ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ec:	ffffefff 	.word	0xffffefff

080036f0 <__sseek>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	000c      	movs	r4, r1
 80036f4:	250e      	movs	r5, #14
 80036f6:	5f49      	ldrsh	r1, [r1, r5]
 80036f8:	f000 f8d6 	bl	80038a8 <_lseek_r>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	1c42      	adds	r2, r0, #1
 8003700:	d103      	bne.n	800370a <__sseek+0x1a>
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <__sseek+0x28>)
 8003704:	4013      	ands	r3, r2
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	0152      	lsls	r2, r2, #5
 800370e:	4313      	orrs	r3, r2
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	6560      	str	r0, [r4, #84]	; 0x54
 8003714:	e7f8      	b.n	8003708 <__sseek+0x18>
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	ffffefff 	.word	0xffffefff

0800371c <__sclose>:
 800371c:	b510      	push	{r4, lr}
 800371e:	230e      	movs	r3, #14
 8003720:	5ec9      	ldrsh	r1, [r1, r3]
 8003722:	f000 f8af 	bl	8003884 <_close_r>
 8003726:	bd10      	pop	{r4, pc}

08003728 <__swbuf_r>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	0006      	movs	r6, r0
 800372c:	000d      	movs	r5, r1
 800372e:	0014      	movs	r4, r2
 8003730:	2800      	cmp	r0, #0
 8003732:	d004      	beq.n	800373e <__swbuf_r+0x16>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <__swbuf_r+0x16>
 800373a:	f7ff ff05 	bl	8003548 <__sinit>
 800373e:	69a3      	ldr	r3, [r4, #24]
 8003740:	60a3      	str	r3, [r4, #8]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	071b      	lsls	r3, r3, #28
 8003746:	d528      	bpl.n	800379a <__swbuf_r+0x72>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d025      	beq.n	800379a <__swbuf_r+0x72>
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	b2ef      	uxtb	r7, r5
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	b2ed      	uxtb	r5, r5
 800375a:	4283      	cmp	r3, r0
 800375c:	dc05      	bgt.n	800376a <__swbuf_r+0x42>
 800375e:	0021      	movs	r1, r4
 8003760:	0030      	movs	r0, r6
 8003762:	f000 fd57 	bl	8004214 <_fflush_r>
 8003766:	2800      	cmp	r0, #0
 8003768:	d11d      	bne.n	80037a6 <__swbuf_r+0x7e>
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	3001      	adds	r0, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	60a3      	str	r3, [r4, #8]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	6022      	str	r2, [r4, #0]
 8003778:	701f      	strb	r7, [r3, #0]
 800377a:	6963      	ldr	r3, [r4, #20]
 800377c:	4283      	cmp	r3, r0
 800377e:	d004      	beq.n	800378a <__swbuf_r+0x62>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	07db      	lsls	r3, r3, #31
 8003784:	d507      	bpl.n	8003796 <__swbuf_r+0x6e>
 8003786:	2d0a      	cmp	r5, #10
 8003788:	d105      	bne.n	8003796 <__swbuf_r+0x6e>
 800378a:	0021      	movs	r1, r4
 800378c:	0030      	movs	r0, r6
 800378e:	f000 fd41 	bl	8004214 <_fflush_r>
 8003792:	2800      	cmp	r0, #0
 8003794:	d107      	bne.n	80037a6 <__swbuf_r+0x7e>
 8003796:	0028      	movs	r0, r5
 8003798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800379a:	0021      	movs	r1, r4
 800379c:	0030      	movs	r0, r6
 800379e:	f000 f805 	bl	80037ac <__swsetup_r>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d0d3      	beq.n	800374e <__swbuf_r+0x26>
 80037a6:	2501      	movs	r5, #1
 80037a8:	426d      	negs	r5, r5
 80037aa:	e7f4      	b.n	8003796 <__swbuf_r+0x6e>

080037ac <__swsetup_r>:
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <__swsetup_r+0xc4>)
 80037ae:	b570      	push	{r4, r5, r6, lr}
 80037b0:	0005      	movs	r5, r0
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	000c      	movs	r4, r1
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d004      	beq.n	80037c4 <__swsetup_r+0x18>
 80037ba:	6a03      	ldr	r3, [r0, #32]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <__swsetup_r+0x18>
 80037c0:	f7ff fec2 	bl	8003548 <__sinit>
 80037c4:	230c      	movs	r3, #12
 80037c6:	5ee2      	ldrsh	r2, [r4, r3]
 80037c8:	b293      	uxth	r3, r2
 80037ca:	0711      	lsls	r1, r2, #28
 80037cc:	d423      	bmi.n	8003816 <__swsetup_r+0x6a>
 80037ce:	06d9      	lsls	r1, r3, #27
 80037d0:	d407      	bmi.n	80037e2 <__swsetup_r+0x36>
 80037d2:	2309      	movs	r3, #9
 80037d4:	2001      	movs	r0, #1
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	3337      	adds	r3, #55	; 0x37
 80037da:	4313      	orrs	r3, r2
 80037dc:	81a3      	strh	r3, [r4, #12]
 80037de:	4240      	negs	r0, r0
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	075b      	lsls	r3, r3, #29
 80037e4:	d513      	bpl.n	800380e <__swsetup_r+0x62>
 80037e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037e8:	2900      	cmp	r1, #0
 80037ea:	d008      	beq.n	80037fe <__swsetup_r+0x52>
 80037ec:	0023      	movs	r3, r4
 80037ee:	3344      	adds	r3, #68	; 0x44
 80037f0:	4299      	cmp	r1, r3
 80037f2:	d002      	beq.n	80037fa <__swsetup_r+0x4e>
 80037f4:	0028      	movs	r0, r5
 80037f6:	f000 f8c1 	bl	800397c <_free_r>
 80037fa:	2300      	movs	r3, #0
 80037fc:	6363      	str	r3, [r4, #52]	; 0x34
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	4393      	bics	r3, r2
 8003804:	81a3      	strh	r3, [r4, #12]
 8003806:	2300      	movs	r3, #0
 8003808:	6063      	str	r3, [r4, #4]
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	2308      	movs	r3, #8
 8003810:	89a2      	ldrh	r2, [r4, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	81a3      	strh	r3, [r4, #12]
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <__swsetup_r+0x88>
 800381c:	21a0      	movs	r1, #160	; 0xa0
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	0089      	lsls	r1, r1, #2
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	400b      	ands	r3, r1
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <__swsetup_r+0x88>
 800382c:	0021      	movs	r1, r4
 800382e:	0028      	movs	r0, r5
 8003830:	f000 fd44 	bl	80042bc <__smakebuf_r>
 8003834:	220c      	movs	r2, #12
 8003836:	5ea3      	ldrsh	r3, [r4, r2]
 8003838:	2001      	movs	r0, #1
 800383a:	001a      	movs	r2, r3
 800383c:	b299      	uxth	r1, r3
 800383e:	4002      	ands	r2, r0
 8003840:	4203      	tst	r3, r0
 8003842:	d00f      	beq.n	8003864 <__swsetup_r+0xb8>
 8003844:	2200      	movs	r2, #0
 8003846:	60a2      	str	r2, [r4, #8]
 8003848:	6962      	ldr	r2, [r4, #20]
 800384a:	4252      	negs	r2, r2
 800384c:	61a2      	str	r2, [r4, #24]
 800384e:	2000      	movs	r0, #0
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	4282      	cmp	r2, r0
 8003854:	d1c4      	bne.n	80037e0 <__swsetup_r+0x34>
 8003856:	0609      	lsls	r1, r1, #24
 8003858:	d5c2      	bpl.n	80037e0 <__swsetup_r+0x34>
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	4313      	orrs	r3, r2
 800385e:	81a3      	strh	r3, [r4, #12]
 8003860:	3801      	subs	r0, #1
 8003862:	e7bd      	b.n	80037e0 <__swsetup_r+0x34>
 8003864:	0788      	lsls	r0, r1, #30
 8003866:	d400      	bmi.n	800386a <__swsetup_r+0xbe>
 8003868:	6962      	ldr	r2, [r4, #20]
 800386a:	60a2      	str	r2, [r4, #8]
 800386c:	e7ef      	b.n	800384e <__swsetup_r+0xa2>
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000064 	.word	0x20000064

08003874 <memset>:
 8003874:	0003      	movs	r3, r0
 8003876:	1882      	adds	r2, r0, r2
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	7019      	strb	r1, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <_close_r>:
 8003884:	2300      	movs	r3, #0
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	4d06      	ldr	r5, [pc, #24]	; (80038a4 <_close_r+0x20>)
 800388a:	0004      	movs	r4, r0
 800388c:	0008      	movs	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd f94a 	bl	8000b28 <_close>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d103      	bne.n	80038a0 <_close_r+0x1c>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d000      	beq.n	80038a0 <_close_r+0x1c>
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	200002d8 	.word	0x200002d8

080038a8 <_lseek_r>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	0004      	movs	r4, r0
 80038ac:	0008      	movs	r0, r1
 80038ae:	0011      	movs	r1, r2
 80038b0:	001a      	movs	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	4d05      	ldr	r5, [pc, #20]	; (80038cc <_lseek_r+0x24>)
 80038b6:	602b      	str	r3, [r5, #0]
 80038b8:	f7fd f957 	bl	8000b6a <_lseek>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d103      	bne.n	80038c8 <_lseek_r+0x20>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d000      	beq.n	80038c8 <_lseek_r+0x20>
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	bd70      	pop	{r4, r5, r6, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	200002d8 	.word	0x200002d8

080038d0 <_read_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	0004      	movs	r4, r0
 80038d4:	0008      	movs	r0, r1
 80038d6:	0011      	movs	r1, r2
 80038d8:	001a      	movs	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	4d05      	ldr	r5, [pc, #20]	; (80038f4 <_read_r+0x24>)
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7fd f905 	bl	8000aee <_read>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d103      	bne.n	80038f0 <_read_r+0x20>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d000      	beq.n	80038f0 <_read_r+0x20>
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	200002d8 	.word	0x200002d8

080038f8 <_write_r>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	0004      	movs	r4, r0
 80038fc:	0008      	movs	r0, r1
 80038fe:	0011      	movs	r1, r2
 8003900:	001a      	movs	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	4d05      	ldr	r5, [pc, #20]	; (800391c <_write_r+0x24>)
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f7fc fd7e 	bl	8000408 <_write>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d103      	bne.n	8003918 <_write_r+0x20>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d000      	beq.n	8003918 <_write_r+0x20>
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	bd70      	pop	{r4, r5, r6, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	200002d8 	.word	0x200002d8

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000064 	.word	0x20000064

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	2600      	movs	r6, #0
 8003930:	4c0c      	ldr	r4, [pc, #48]	; (8003964 <__libc_init_array+0x38>)
 8003932:	4d0d      	ldr	r5, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	2600      	movs	r6, #0
 800393e:	f000 fd3d 	bl	80043bc <_init>
 8003942:	4c0a      	ldr	r4, [pc, #40]	; (800396c <__libc_init_array+0x40>)
 8003944:	4d0a      	ldr	r5, [pc, #40]	; (8003970 <__libc_init_array+0x44>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	00b3      	lsls	r3, r6, #2
 8003952:	58eb      	ldr	r3, [r5, r3]
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	00b3      	lsls	r3, r6, #2
 800395c:	58eb      	ldr	r3, [r5, r3]
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	0800444c 	.word	0x0800444c
 8003968:	0800444c 	.word	0x0800444c
 800396c:	08004450 	.word	0x08004450
 8003970:	0800444c 	.word	0x0800444c

08003974 <__retarget_lock_init_recursive>:
 8003974:	4770      	bx	lr

08003976 <__retarget_lock_acquire_recursive>:
 8003976:	4770      	bx	lr

08003978 <__retarget_lock_release_recursive>:
 8003978:	4770      	bx	lr
	...

0800397c <_free_r>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	0005      	movs	r5, r0
 8003980:	2900      	cmp	r1, #0
 8003982:	d010      	beq.n	80039a6 <_free_r+0x2a>
 8003984:	1f0c      	subs	r4, r1, #4
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	da00      	bge.n	800398e <_free_r+0x12>
 800398c:	18e4      	adds	r4, r4, r3
 800398e:	0028      	movs	r0, r5
 8003990:	f000 f8e2 	bl	8003b58 <__malloc_lock>
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <_free_r+0x90>)
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <_free_r+0x2c>
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	6014      	str	r4, [r2, #0]
 80039a0:	0028      	movs	r0, r5
 80039a2:	f000 f8e1 	bl	8003b68 <__malloc_unlock>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d908      	bls.n	80039be <_free_r+0x42>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	1821      	adds	r1, r4, r0
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d1f3      	bne.n	800399c <_free_r+0x20>
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	1809      	adds	r1, r1, r0
 80039ba:	6021      	str	r1, [r4, #0]
 80039bc:	e7ee      	b.n	800399c <_free_r+0x20>
 80039be:	001a      	movs	r2, r3
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <_free_r+0x4e>
 80039c6:	42a3      	cmp	r3, r4
 80039c8:	d9f9      	bls.n	80039be <_free_r+0x42>
 80039ca:	6811      	ldr	r1, [r2, #0]
 80039cc:	1850      	adds	r0, r2, r1
 80039ce:	42a0      	cmp	r0, r4
 80039d0:	d10b      	bne.n	80039ea <_free_r+0x6e>
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	1809      	adds	r1, r1, r0
 80039d6:	1850      	adds	r0, r2, r1
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	4283      	cmp	r3, r0
 80039dc:	d1e0      	bne.n	80039a0 <_free_r+0x24>
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	1841      	adds	r1, r0, r1
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e7da      	b.n	80039a0 <_free_r+0x24>
 80039ea:	42a0      	cmp	r0, r4
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x78>
 80039ee:	230c      	movs	r3, #12
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	e7d5      	b.n	80039a0 <_free_r+0x24>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d103      	bne.n	8003a04 <_free_r+0x88>
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	1809      	adds	r1, r1, r0
 8003a02:	6021      	str	r1, [r4, #0]
 8003a04:	6063      	str	r3, [r4, #4]
 8003a06:	6054      	str	r4, [r2, #4]
 8003a08:	e7ca      	b.n	80039a0 <_free_r+0x24>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	200002e0 	.word	0x200002e0

08003a10 <sbrk_aligned>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4e0f      	ldr	r6, [pc, #60]	; (8003a50 <sbrk_aligned+0x40>)
 8003a14:	000d      	movs	r5, r1
 8003a16:	6831      	ldr	r1, [r6, #0]
 8003a18:	0004      	movs	r4, r0
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	d102      	bne.n	8003a24 <sbrk_aligned+0x14>
 8003a1e:	f000 fcaf 	bl	8004380 <_sbrk_r>
 8003a22:	6030      	str	r0, [r6, #0]
 8003a24:	0029      	movs	r1, r5
 8003a26:	0020      	movs	r0, r4
 8003a28:	f000 fcaa 	bl	8004380 <_sbrk_r>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d00a      	beq.n	8003a46 <sbrk_aligned+0x36>
 8003a30:	2303      	movs	r3, #3
 8003a32:	1cc5      	adds	r5, r0, #3
 8003a34:	439d      	bics	r5, r3
 8003a36:	42a8      	cmp	r0, r5
 8003a38:	d007      	beq.n	8003a4a <sbrk_aligned+0x3a>
 8003a3a:	1a29      	subs	r1, r5, r0
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	f000 fc9f 	bl	8004380 <_sbrk_r>
 8003a42:	3001      	adds	r0, #1
 8003a44:	d101      	bne.n	8003a4a <sbrk_aligned+0x3a>
 8003a46:	2501      	movs	r5, #1
 8003a48:	426d      	negs	r5, r5
 8003a4a:	0028      	movs	r0, r5
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	200002e4 	.word	0x200002e4

08003a54 <_malloc_r>:
 8003a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a56:	2203      	movs	r2, #3
 8003a58:	1ccb      	adds	r3, r1, #3
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	0006      	movs	r6, r0
 8003a60:	001f      	movs	r7, r3
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d238      	bcs.n	8003ad8 <_malloc_r+0x84>
 8003a66:	270c      	movs	r7, #12
 8003a68:	42b9      	cmp	r1, r7
 8003a6a:	d837      	bhi.n	8003adc <_malloc_r+0x88>
 8003a6c:	0030      	movs	r0, r6
 8003a6e:	f000 f873 	bl	8003b58 <__malloc_lock>
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <_malloc_r+0x100>)
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	001c      	movs	r4, r3
 8003a7a:	2c00      	cmp	r4, #0
 8003a7c:	d133      	bne.n	8003ae6 <_malloc_r+0x92>
 8003a7e:	0039      	movs	r1, r7
 8003a80:	0030      	movs	r0, r6
 8003a82:	f7ff ffc5 	bl	8003a10 <sbrk_aligned>
 8003a86:	0004      	movs	r4, r0
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d15e      	bne.n	8003b4a <_malloc_r+0xf6>
 8003a8c:	9b00      	ldr	r3, [sp, #0]
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	0025      	movs	r5, r4
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	d14e      	bne.n	8003b34 <_malloc_r+0xe0>
 8003a96:	2c00      	cmp	r4, #0
 8003a98:	d051      	beq.n	8003b3e <_malloc_r+0xea>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	0029      	movs	r1, r5
 8003a9e:	18e3      	adds	r3, r4, r3
 8003aa0:	0030      	movs	r0, r6
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f000 fc6c 	bl	8004380 <_sbrk_r>
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	4283      	cmp	r3, r0
 8003aac:	d147      	bne.n	8003b3e <_malloc_r+0xea>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	0030      	movs	r0, r6
 8003ab2:	1aff      	subs	r7, r7, r3
 8003ab4:	0039      	movs	r1, r7
 8003ab6:	f7ff ffab 	bl	8003a10 <sbrk_aligned>
 8003aba:	3001      	adds	r0, #1
 8003abc:	d03f      	beq.n	8003b3e <_malloc_r+0xea>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	9b00      	ldr	r3, [sp, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d040      	beq.n	8003b4e <_malloc_r+0xfa>
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	42a2      	cmp	r2, r4
 8003ad0:	d133      	bne.n	8003b3a <_malloc_r+0xe6>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	e014      	b.n	8003b02 <_malloc_r+0xae>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	dac5      	bge.n	8003a68 <_malloc_r+0x14>
 8003adc:	230c      	movs	r3, #12
 8003ade:	2500      	movs	r5, #0
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	0028      	movs	r0, r5
 8003ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ae6:	6821      	ldr	r1, [r4, #0]
 8003ae8:	1bc9      	subs	r1, r1, r7
 8003aea:	d420      	bmi.n	8003b2e <_malloc_r+0xda>
 8003aec:	290b      	cmp	r1, #11
 8003aee:	d918      	bls.n	8003b22 <_malloc_r+0xce>
 8003af0:	19e2      	adds	r2, r4, r7
 8003af2:	6027      	str	r7, [r4, #0]
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d112      	bne.n	8003b1e <_malloc_r+0xca>
 8003af8:	9b00      	ldr	r3, [sp, #0]
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	6011      	str	r1, [r2, #0]
 8003b00:	6053      	str	r3, [r2, #4]
 8003b02:	0030      	movs	r0, r6
 8003b04:	0025      	movs	r5, r4
 8003b06:	f000 f82f 	bl	8003b68 <__malloc_unlock>
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	350b      	adds	r5, #11
 8003b0e:	1d23      	adds	r3, r4, #4
 8003b10:	4395      	bics	r5, r2
 8003b12:	1aea      	subs	r2, r5, r3
 8003b14:	429d      	cmp	r5, r3
 8003b16:	d0e4      	beq.n	8003ae2 <_malloc_r+0x8e>
 8003b18:	1b5b      	subs	r3, r3, r5
 8003b1a:	50a3      	str	r3, [r4, r2]
 8003b1c:	e7e1      	b.n	8003ae2 <_malloc_r+0x8e>
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e7ec      	b.n	8003afc <_malloc_r+0xa8>
 8003b22:	6862      	ldr	r2, [r4, #4]
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d1d5      	bne.n	8003ad4 <_malloc_r+0x80>
 8003b28:	9b00      	ldr	r3, [sp, #0]
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e7e9      	b.n	8003b02 <_malloc_r+0xae>
 8003b2e:	0023      	movs	r3, r4
 8003b30:	6864      	ldr	r4, [r4, #4]
 8003b32:	e7a2      	b.n	8003a7a <_malloc_r+0x26>
 8003b34:	002c      	movs	r4, r5
 8003b36:	686d      	ldr	r5, [r5, #4]
 8003b38:	e7ab      	b.n	8003a92 <_malloc_r+0x3e>
 8003b3a:	0013      	movs	r3, r2
 8003b3c:	e7c4      	b.n	8003ac8 <_malloc_r+0x74>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	0030      	movs	r0, r6
 8003b42:	6033      	str	r3, [r6, #0]
 8003b44:	f000 f810 	bl	8003b68 <__malloc_unlock>
 8003b48:	e7cb      	b.n	8003ae2 <_malloc_r+0x8e>
 8003b4a:	6027      	str	r7, [r4, #0]
 8003b4c:	e7d9      	b.n	8003b02 <_malloc_r+0xae>
 8003b4e:	605b      	str	r3, [r3, #4]
 8003b50:	deff      	udf	#255	; 0xff
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	200002e0 	.word	0x200002e0

08003b58 <__malloc_lock>:
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4802      	ldr	r0, [pc, #8]	; (8003b64 <__malloc_lock+0xc>)
 8003b5c:	f7ff ff0b 	bl	8003976 <__retarget_lock_acquire_recursive>
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	200002dc 	.word	0x200002dc

08003b68 <__malloc_unlock>:
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4802      	ldr	r0, [pc, #8]	; (8003b74 <__malloc_unlock+0xc>)
 8003b6c:	f7ff ff04 	bl	8003978 <__retarget_lock_release_recursive>
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	200002dc 	.word	0x200002dc

08003b78 <__sfputc_r>:
 8003b78:	6893      	ldr	r3, [r2, #8]
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da04      	bge.n	8003b8e <__sfputc_r+0x16>
 8003b84:	6994      	ldr	r4, [r2, #24]
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	db07      	blt.n	8003b9a <__sfputc_r+0x22>
 8003b8a:	290a      	cmp	r1, #10
 8003b8c:	d005      	beq.n	8003b9a <__sfputc_r+0x22>
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	1c58      	adds	r0, r3, #1
 8003b92:	6010      	str	r0, [r2, #0]
 8003b94:	7019      	strb	r1, [r3, #0]
 8003b96:	0008      	movs	r0, r1
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	f7ff fdc5 	bl	8003728 <__swbuf_r>
 8003b9e:	0001      	movs	r1, r0
 8003ba0:	e7f9      	b.n	8003b96 <__sfputc_r+0x1e>

08003ba2 <__sfputs_r>:
 8003ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba4:	0006      	movs	r6, r0
 8003ba6:	000f      	movs	r7, r1
 8003ba8:	0014      	movs	r4, r2
 8003baa:	18d5      	adds	r5, r2, r3
 8003bac:	42ac      	cmp	r4, r5
 8003bae:	d101      	bne.n	8003bb4 <__sfputs_r+0x12>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e007      	b.n	8003bc4 <__sfputs_r+0x22>
 8003bb4:	7821      	ldrb	r1, [r4, #0]
 8003bb6:	003a      	movs	r2, r7
 8003bb8:	0030      	movs	r0, r6
 8003bba:	f7ff ffdd 	bl	8003b78 <__sfputc_r>
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d1f3      	bne.n	8003bac <__sfputs_r+0xa>
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bc8 <_vfiprintf_r>:
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b0a1      	sub	sp, #132	; 0x84
 8003bcc:	000f      	movs	r7, r1
 8003bce:	0015      	movs	r5, r2
 8003bd0:	001e      	movs	r6, r3
 8003bd2:	9003      	str	r0, [sp, #12]
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d004      	beq.n	8003be2 <_vfiprintf_r+0x1a>
 8003bd8:	6a03      	ldr	r3, [r0, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <_vfiprintf_r+0x1a>
 8003bde:	f7ff fcb3 	bl	8003548 <__sinit>
 8003be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be4:	07db      	lsls	r3, r3, #31
 8003be6:	d405      	bmi.n	8003bf4 <_vfiprintf_r+0x2c>
 8003be8:	89bb      	ldrh	r3, [r7, #12]
 8003bea:	059b      	lsls	r3, r3, #22
 8003bec:	d402      	bmi.n	8003bf4 <_vfiprintf_r+0x2c>
 8003bee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003bf0:	f7ff fec1 	bl	8003976 <__retarget_lock_acquire_recursive>
 8003bf4:	89bb      	ldrh	r3, [r7, #12]
 8003bf6:	071b      	lsls	r3, r3, #28
 8003bf8:	d502      	bpl.n	8003c00 <_vfiprintf_r+0x38>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <_vfiprintf_r+0x60>
 8003c00:	0039      	movs	r1, r7
 8003c02:	9803      	ldr	r0, [sp, #12]
 8003c04:	f7ff fdd2 	bl	80037ac <__swsetup_r>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d00d      	beq.n	8003c28 <_vfiprintf_r+0x60>
 8003c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c0e:	07db      	lsls	r3, r3, #31
 8003c10:	d503      	bpl.n	8003c1a <_vfiprintf_r+0x52>
 8003c12:	2001      	movs	r0, #1
 8003c14:	4240      	negs	r0, r0
 8003c16:	b021      	add	sp, #132	; 0x84
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1a:	89bb      	ldrh	r3, [r7, #12]
 8003c1c:	059b      	lsls	r3, r3, #22
 8003c1e:	d4f8      	bmi.n	8003c12 <_vfiprintf_r+0x4a>
 8003c20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003c22:	f7ff fea9 	bl	8003978 <__retarget_lock_release_recursive>
 8003c26:	e7f4      	b.n	8003c12 <_vfiprintf_r+0x4a>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	ac08      	add	r4, sp, #32
 8003c2c:	6163      	str	r3, [r4, #20]
 8003c2e:	3320      	adds	r3, #32
 8003c30:	7663      	strb	r3, [r4, #25]
 8003c32:	3310      	adds	r3, #16
 8003c34:	76a3      	strb	r3, [r4, #26]
 8003c36:	9607      	str	r6, [sp, #28]
 8003c38:	002e      	movs	r6, r5
 8003c3a:	7833      	ldrb	r3, [r6, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <_vfiprintf_r+0x7c>
 8003c40:	2b25      	cmp	r3, #37	; 0x25
 8003c42:	d148      	bne.n	8003cd6 <_vfiprintf_r+0x10e>
 8003c44:	1b73      	subs	r3, r6, r5
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	42ae      	cmp	r6, r5
 8003c4a:	d00b      	beq.n	8003c64 <_vfiprintf_r+0x9c>
 8003c4c:	002a      	movs	r2, r5
 8003c4e:	0039      	movs	r1, r7
 8003c50:	9803      	ldr	r0, [sp, #12]
 8003c52:	f7ff ffa6 	bl	8003ba2 <__sfputs_r>
 8003c56:	3001      	adds	r0, #1
 8003c58:	d100      	bne.n	8003c5c <_vfiprintf_r+0x94>
 8003c5a:	e0af      	b.n	8003dbc <_vfiprintf_r+0x1f4>
 8003c5c:	6963      	ldr	r3, [r4, #20]
 8003c5e:	9a05      	ldr	r2, [sp, #20]
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	6163      	str	r3, [r4, #20]
 8003c64:	7833      	ldrb	r3, [r6, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d100      	bne.n	8003c6c <_vfiprintf_r+0xa4>
 8003c6a:	e0a7      	b.n	8003dbc <_vfiprintf_r+0x1f4>
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4252      	negs	r2, r2
 8003c72:	6062      	str	r2, [r4, #4]
 8003c74:	a904      	add	r1, sp, #16
 8003c76:	3254      	adds	r2, #84	; 0x54
 8003c78:	1852      	adds	r2, r2, r1
 8003c7a:	1c75      	adds	r5, r6, #1
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	60e3      	str	r3, [r4, #12]
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	7013      	strb	r3, [r2, #0]
 8003c84:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c86:	4b59      	ldr	r3, [pc, #356]	; (8003dec <_vfiprintf_r+0x224>)
 8003c88:	2205      	movs	r2, #5
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	7829      	ldrb	r1, [r5, #0]
 8003c8e:	9305      	str	r3, [sp, #20]
 8003c90:	f000 fb88 	bl	80043a4 <memchr>
 8003c94:	1c6e      	adds	r6, r5, #1
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d11f      	bne.n	8003cda <_vfiprintf_r+0x112>
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	06d3      	lsls	r3, r2, #27
 8003c9e:	d504      	bpl.n	8003caa <_vfiprintf_r+0xe2>
 8003ca0:	2353      	movs	r3, #83	; 0x53
 8003ca2:	a904      	add	r1, sp, #16
 8003ca4:	185b      	adds	r3, r3, r1
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	7019      	strb	r1, [r3, #0]
 8003caa:	0713      	lsls	r3, r2, #28
 8003cac:	d504      	bpl.n	8003cb8 <_vfiprintf_r+0xf0>
 8003cae:	2353      	movs	r3, #83	; 0x53
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	185b      	adds	r3, r3, r1
 8003cb4:	212b      	movs	r1, #43	; 0x2b
 8003cb6:	7019      	strb	r1, [r3, #0]
 8003cb8:	782b      	ldrb	r3, [r5, #0]
 8003cba:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbc:	d016      	beq.n	8003cec <_vfiprintf_r+0x124>
 8003cbe:	002e      	movs	r6, r5
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	200a      	movs	r0, #10
 8003cc4:	68e3      	ldr	r3, [r4, #12]
 8003cc6:	7832      	ldrb	r2, [r6, #0]
 8003cc8:	1c75      	adds	r5, r6, #1
 8003cca:	3a30      	subs	r2, #48	; 0x30
 8003ccc:	2a09      	cmp	r2, #9
 8003cce:	d94e      	bls.n	8003d6e <_vfiprintf_r+0x1a6>
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d111      	bne.n	8003cf8 <_vfiprintf_r+0x130>
 8003cd4:	e017      	b.n	8003d06 <_vfiprintf_r+0x13e>
 8003cd6:	3601      	adds	r6, #1
 8003cd8:	e7af      	b.n	8003c3a <_vfiprintf_r+0x72>
 8003cda:	9b05      	ldr	r3, [sp, #20]
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	1ac0      	subs	r0, r0, r3
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4083      	lsls	r3, r0
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	0035      	movs	r5, r6
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	e7cc      	b.n	8003c86 <_vfiprintf_r+0xbe>
 8003cec:	9b07      	ldr	r3, [sp, #28]
 8003cee:	1d19      	adds	r1, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	9107      	str	r1, [sp, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db01      	blt.n	8003cfc <_vfiprintf_r+0x134>
 8003cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cfa:	e004      	b.n	8003d06 <_vfiprintf_r+0x13e>
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	60e3      	str	r3, [r4, #12]
 8003d00:	2302      	movs	r3, #2
 8003d02:	4313      	orrs	r3, r2
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	7833      	ldrb	r3, [r6, #0]
 8003d08:	2b2e      	cmp	r3, #46	; 0x2e
 8003d0a:	d10a      	bne.n	8003d22 <_vfiprintf_r+0x15a>
 8003d0c:	7873      	ldrb	r3, [r6, #1]
 8003d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d10:	d135      	bne.n	8003d7e <_vfiprintf_r+0x1b6>
 8003d12:	9b07      	ldr	r3, [sp, #28]
 8003d14:	3602      	adds	r6, #2
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9207      	str	r2, [sp, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	db2b      	blt.n	8003d78 <_vfiprintf_r+0x1b0>
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	4d33      	ldr	r5, [pc, #204]	; (8003df0 <_vfiprintf_r+0x228>)
 8003d24:	2203      	movs	r2, #3
 8003d26:	0028      	movs	r0, r5
 8003d28:	7831      	ldrb	r1, [r6, #0]
 8003d2a:	f000 fb3b 	bl	80043a4 <memchr>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d006      	beq.n	8003d40 <_vfiprintf_r+0x178>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	1b40      	subs	r0, r0, r5
 8003d36:	4083      	lsls	r3, r0
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	7831      	ldrb	r1, [r6, #0]
 8003d42:	2206      	movs	r2, #6
 8003d44:	482b      	ldr	r0, [pc, #172]	; (8003df4 <_vfiprintf_r+0x22c>)
 8003d46:	1c75      	adds	r5, r6, #1
 8003d48:	7621      	strb	r1, [r4, #24]
 8003d4a:	f000 fb2b 	bl	80043a4 <memchr>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d043      	beq.n	8003dda <_vfiprintf_r+0x212>
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <_vfiprintf_r+0x230>)
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d125      	bne.n	8003da4 <_vfiprintf_r+0x1dc>
 8003d58:	2207      	movs	r2, #7
 8003d5a:	9b07      	ldr	r3, [sp, #28]
 8003d5c:	3307      	adds	r3, #7
 8003d5e:	4393      	bics	r3, r2
 8003d60:	3308      	adds	r3, #8
 8003d62:	9307      	str	r3, [sp, #28]
 8003d64:	6963      	ldr	r3, [r4, #20]
 8003d66:	9a04      	ldr	r2, [sp, #16]
 8003d68:	189b      	adds	r3, r3, r2
 8003d6a:	6163      	str	r3, [r4, #20]
 8003d6c:	e764      	b.n	8003c38 <_vfiprintf_r+0x70>
 8003d6e:	4343      	muls	r3, r0
 8003d70:	002e      	movs	r6, r5
 8003d72:	2101      	movs	r1, #1
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	e7a6      	b.n	8003cc6 <_vfiprintf_r+0xfe>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	e7d0      	b.n	8003d20 <_vfiprintf_r+0x158>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	200a      	movs	r0, #10
 8003d82:	001a      	movs	r2, r3
 8003d84:	3601      	adds	r6, #1
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	7831      	ldrb	r1, [r6, #0]
 8003d8a:	1c75      	adds	r5, r6, #1
 8003d8c:	3930      	subs	r1, #48	; 0x30
 8003d8e:	2909      	cmp	r1, #9
 8003d90:	d903      	bls.n	8003d9a <_vfiprintf_r+0x1d2>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0c5      	beq.n	8003d22 <_vfiprintf_r+0x15a>
 8003d96:	9209      	str	r2, [sp, #36]	; 0x24
 8003d98:	e7c3      	b.n	8003d22 <_vfiprintf_r+0x15a>
 8003d9a:	4342      	muls	r2, r0
 8003d9c:	002e      	movs	r6, r5
 8003d9e:	2301      	movs	r3, #1
 8003da0:	1852      	adds	r2, r2, r1
 8003da2:	e7f1      	b.n	8003d88 <_vfiprintf_r+0x1c0>
 8003da4:	aa07      	add	r2, sp, #28
 8003da6:	9200      	str	r2, [sp, #0]
 8003da8:	0021      	movs	r1, r4
 8003daa:	003a      	movs	r2, r7
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <_vfiprintf_r+0x234>)
 8003dae:	9803      	ldr	r0, [sp, #12]
 8003db0:	e000      	b.n	8003db4 <_vfiprintf_r+0x1ec>
 8003db2:	bf00      	nop
 8003db4:	9004      	str	r0, [sp, #16]
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	3301      	adds	r3, #1
 8003dba:	d1d3      	bne.n	8003d64 <_vfiprintf_r+0x19c>
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dbe:	07db      	lsls	r3, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_vfiprintf_r+0x206>
 8003dc2:	89bb      	ldrh	r3, [r7, #12]
 8003dc4:	059b      	lsls	r3, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_vfiprintf_r+0x206>
 8003dc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003dca:	f7ff fdd5 	bl	8003978 <__retarget_lock_release_recursive>
 8003dce:	89bb      	ldrh	r3, [r7, #12]
 8003dd0:	065b      	lsls	r3, r3, #25
 8003dd2:	d500      	bpl.n	8003dd6 <_vfiprintf_r+0x20e>
 8003dd4:	e71d      	b.n	8003c12 <_vfiprintf_r+0x4a>
 8003dd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003dd8:	e71d      	b.n	8003c16 <_vfiprintf_r+0x4e>
 8003dda:	aa07      	add	r2, sp, #28
 8003ddc:	9200      	str	r2, [sp, #0]
 8003dde:	0021      	movs	r1, r4
 8003de0:	003a      	movs	r2, r7
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <_vfiprintf_r+0x234>)
 8003de4:	9803      	ldr	r0, [sp, #12]
 8003de6:	f000 f87b 	bl	8003ee0 <_printf_i>
 8003dea:	e7e3      	b.n	8003db4 <_vfiprintf_r+0x1ec>
 8003dec:	08004418 	.word	0x08004418
 8003df0:	0800441e 	.word	0x0800441e
 8003df4:	08004422 	.word	0x08004422
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	08003ba3 	.word	0x08003ba3

08003e00 <_printf_common>:
 8003e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e02:	0016      	movs	r6, r2
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	688a      	ldr	r2, [r1, #8]
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	000c      	movs	r4, r1
 8003e0c:	9000      	str	r0, [sp, #0]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	da00      	bge.n	8003e14 <_printf_common+0x14>
 8003e12:	0013      	movs	r3, r2
 8003e14:	0022      	movs	r2, r4
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	3243      	adds	r2, #67	; 0x43
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d001      	beq.n	8003e24 <_printf_common+0x24>
 8003e20:	3301      	adds	r3, #1
 8003e22:	6033      	str	r3, [r6, #0]
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	d502      	bpl.n	8003e30 <_printf_common+0x30>
 8003e2a:	6833      	ldr	r3, [r6, #0]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	6033      	str	r3, [r6, #0]
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	2306      	movs	r3, #6
 8003e34:	0015      	movs	r5, r2
 8003e36:	401d      	ands	r5, r3
 8003e38:	421a      	tst	r2, r3
 8003e3a:	d027      	beq.n	8003e8c <_printf_common+0x8c>
 8003e3c:	0023      	movs	r3, r4
 8003e3e:	3343      	adds	r3, #67	; 0x43
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	1e5a      	subs	r2, r3, #1
 8003e44:	4193      	sbcs	r3, r2
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	0692      	lsls	r2, r2, #26
 8003e4a:	d430      	bmi.n	8003eae <_printf_common+0xae>
 8003e4c:	0022      	movs	r2, r4
 8003e4e:	9901      	ldr	r1, [sp, #4]
 8003e50:	9800      	ldr	r0, [sp, #0]
 8003e52:	9d08      	ldr	r5, [sp, #32]
 8003e54:	3243      	adds	r2, #67	; 0x43
 8003e56:	47a8      	blx	r5
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d025      	beq.n	8003ea8 <_printf_common+0xa8>
 8003e5c:	2206      	movs	r2, #6
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	2500      	movs	r5, #0
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d105      	bne.n	8003e74 <_printf_common+0x74>
 8003e68:	6833      	ldr	r3, [r6, #0]
 8003e6a:	68e5      	ldr	r5, [r4, #12]
 8003e6c:	1aed      	subs	r5, r5, r3
 8003e6e:	43eb      	mvns	r3, r5
 8003e70:	17db      	asrs	r3, r3, #31
 8003e72:	401d      	ands	r5, r3
 8003e74:	68a3      	ldr	r3, [r4, #8]
 8003e76:	6922      	ldr	r2, [r4, #16]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	dd01      	ble.n	8003e80 <_printf_common+0x80>
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	18ed      	adds	r5, r5, r3
 8003e80:	2600      	movs	r6, #0
 8003e82:	42b5      	cmp	r5, r6
 8003e84:	d120      	bne.n	8003ec8 <_printf_common+0xc8>
 8003e86:	2000      	movs	r0, #0
 8003e88:	e010      	b.n	8003eac <_printf_common+0xac>
 8003e8a:	3501      	adds	r5, #1
 8003e8c:	68e3      	ldr	r3, [r4, #12]
 8003e8e:	6832      	ldr	r2, [r6, #0]
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	42ab      	cmp	r3, r5
 8003e94:	ddd2      	ble.n	8003e3c <_printf_common+0x3c>
 8003e96:	0022      	movs	r2, r4
 8003e98:	2301      	movs	r3, #1
 8003e9a:	9901      	ldr	r1, [sp, #4]
 8003e9c:	9800      	ldr	r0, [sp, #0]
 8003e9e:	9f08      	ldr	r7, [sp, #32]
 8003ea0:	3219      	adds	r2, #25
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d1f0      	bne.n	8003e8a <_printf_common+0x8a>
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	4240      	negs	r0, r0
 8003eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eae:	2030      	movs	r0, #48	; 0x30
 8003eb0:	18e1      	adds	r1, r4, r3
 8003eb2:	3143      	adds	r1, #67	; 0x43
 8003eb4:	7008      	strb	r0, [r1, #0]
 8003eb6:	0021      	movs	r1, r4
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	3145      	adds	r1, #69	; 0x45
 8003ebc:	7809      	ldrb	r1, [r1, #0]
 8003ebe:	18a2      	adds	r2, r4, r2
 8003ec0:	3243      	adds	r2, #67	; 0x43
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	7011      	strb	r1, [r2, #0]
 8003ec6:	e7c1      	b.n	8003e4c <_printf_common+0x4c>
 8003ec8:	0022      	movs	r2, r4
 8003eca:	2301      	movs	r3, #1
 8003ecc:	9901      	ldr	r1, [sp, #4]
 8003ece:	9800      	ldr	r0, [sp, #0]
 8003ed0:	9f08      	ldr	r7, [sp, #32]
 8003ed2:	321a      	adds	r2, #26
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d0e6      	beq.n	8003ea8 <_printf_common+0xa8>
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7d1      	b.n	8003e82 <_printf_common+0x82>
	...

08003ee0 <_printf_i>:
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b08b      	sub	sp, #44	; 0x2c
 8003ee4:	9206      	str	r2, [sp, #24]
 8003ee6:	000a      	movs	r2, r1
 8003ee8:	3243      	adds	r2, #67	; 0x43
 8003eea:	9307      	str	r3, [sp, #28]
 8003eec:	9005      	str	r0, [sp, #20]
 8003eee:	9204      	str	r2, [sp, #16]
 8003ef0:	7e0a      	ldrb	r2, [r1, #24]
 8003ef2:	000c      	movs	r4, r1
 8003ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ef6:	2a78      	cmp	r2, #120	; 0x78
 8003ef8:	d809      	bhi.n	8003f0e <_printf_i+0x2e>
 8003efa:	2a62      	cmp	r2, #98	; 0x62
 8003efc:	d80b      	bhi.n	8003f16 <_printf_i+0x36>
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d100      	bne.n	8003f04 <_printf_i+0x24>
 8003f02:	e0be      	b.n	8004082 <_printf_i+0x1a2>
 8003f04:	497c      	ldr	r1, [pc, #496]	; (80040f8 <_printf_i+0x218>)
 8003f06:	9103      	str	r1, [sp, #12]
 8003f08:	2a58      	cmp	r2, #88	; 0x58
 8003f0a:	d100      	bne.n	8003f0e <_printf_i+0x2e>
 8003f0c:	e093      	b.n	8004036 <_printf_i+0x156>
 8003f0e:	0026      	movs	r6, r4
 8003f10:	3642      	adds	r6, #66	; 0x42
 8003f12:	7032      	strb	r2, [r6, #0]
 8003f14:	e022      	b.n	8003f5c <_printf_i+0x7c>
 8003f16:	0010      	movs	r0, r2
 8003f18:	3863      	subs	r0, #99	; 0x63
 8003f1a:	2815      	cmp	r0, #21
 8003f1c:	d8f7      	bhi.n	8003f0e <_printf_i+0x2e>
 8003f1e:	f7fc f8f3 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f22:	0016      	.short	0x0016
 8003f24:	fff6001f 	.word	0xfff6001f
 8003f28:	fff6fff6 	.word	0xfff6fff6
 8003f2c:	001ffff6 	.word	0x001ffff6
 8003f30:	fff6fff6 	.word	0xfff6fff6
 8003f34:	fff6fff6 	.word	0xfff6fff6
 8003f38:	003600a3 	.word	0x003600a3
 8003f3c:	fff60083 	.word	0xfff60083
 8003f40:	00b4fff6 	.word	0x00b4fff6
 8003f44:	0036fff6 	.word	0x0036fff6
 8003f48:	fff6fff6 	.word	0xfff6fff6
 8003f4c:	0087      	.short	0x0087
 8003f4e:	0026      	movs	r6, r4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	3642      	adds	r6, #66	; 0x42
 8003f54:	1d11      	adds	r1, r2, #4
 8003f56:	6019      	str	r1, [r3, #0]
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	7033      	strb	r3, [r6, #0]
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0a2      	b.n	80040a6 <_printf_i+0x1c6>
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	6809      	ldr	r1, [r1, #0]
 8003f64:	1d02      	adds	r2, r0, #4
 8003f66:	060d      	lsls	r5, r1, #24
 8003f68:	d50b      	bpl.n	8003f82 <_printf_i+0xa2>
 8003f6a:	6805      	ldr	r5, [r0, #0]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	da03      	bge.n	8003f7a <_printf_i+0x9a>
 8003f72:	232d      	movs	r3, #45	; 0x2d
 8003f74:	9a04      	ldr	r2, [sp, #16]
 8003f76:	426d      	negs	r5, r5
 8003f78:	7013      	strb	r3, [r2, #0]
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <_printf_i+0x218>)
 8003f7c:	270a      	movs	r7, #10
 8003f7e:	9303      	str	r3, [sp, #12]
 8003f80:	e01b      	b.n	8003fba <_printf_i+0xda>
 8003f82:	6805      	ldr	r5, [r0, #0]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	0649      	lsls	r1, r1, #25
 8003f88:	d5f1      	bpl.n	8003f6e <_printf_i+0x8e>
 8003f8a:	b22d      	sxth	r5, r5
 8003f8c:	e7ef      	b.n	8003f6e <_printf_i+0x8e>
 8003f8e:	680d      	ldr	r5, [r1, #0]
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	1d08      	adds	r0, r1, #4
 8003f94:	6018      	str	r0, [r3, #0]
 8003f96:	062e      	lsls	r6, r5, #24
 8003f98:	d501      	bpl.n	8003f9e <_printf_i+0xbe>
 8003f9a:	680d      	ldr	r5, [r1, #0]
 8003f9c:	e003      	b.n	8003fa6 <_printf_i+0xc6>
 8003f9e:	066d      	lsls	r5, r5, #25
 8003fa0:	d5fb      	bpl.n	8003f9a <_printf_i+0xba>
 8003fa2:	680d      	ldr	r5, [r1, #0]
 8003fa4:	b2ad      	uxth	r5, r5
 8003fa6:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <_printf_i+0x218>)
 8003fa8:	2708      	movs	r7, #8
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	2a6f      	cmp	r2, #111	; 0x6f
 8003fae:	d000      	beq.n	8003fb2 <_printf_i+0xd2>
 8003fb0:	3702      	adds	r7, #2
 8003fb2:	0023      	movs	r3, r4
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	3343      	adds	r3, #67	; 0x43
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	60a3      	str	r3, [r4, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db03      	blt.n	8003fca <_printf_i+0xea>
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	438a      	bics	r2, r1
 8003fc8:	6022      	str	r2, [r4, #0]
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	d102      	bne.n	8003fd4 <_printf_i+0xf4>
 8003fce:	9e04      	ldr	r6, [sp, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <_printf_i+0x10e>
 8003fd4:	9e04      	ldr	r6, [sp, #16]
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	0039      	movs	r1, r7
 8003fda:	f7fc f925 	bl	8000228 <__aeabi_uidivmod>
 8003fde:	9b03      	ldr	r3, [sp, #12]
 8003fe0:	3e01      	subs	r6, #1
 8003fe2:	5c5b      	ldrb	r3, [r3, r1]
 8003fe4:	7033      	strb	r3, [r6, #0]
 8003fe6:	002b      	movs	r3, r5
 8003fe8:	0005      	movs	r5, r0
 8003fea:	429f      	cmp	r7, r3
 8003fec:	d9f3      	bls.n	8003fd6 <_printf_i+0xf6>
 8003fee:	2f08      	cmp	r7, #8
 8003ff0:	d109      	bne.n	8004006 <_printf_i+0x126>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	07db      	lsls	r3, r3, #31
 8003ff6:	d506      	bpl.n	8004006 <_printf_i+0x126>
 8003ff8:	6862      	ldr	r2, [r4, #4]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	dc02      	bgt.n	8004006 <_printf_i+0x126>
 8004000:	2330      	movs	r3, #48	; 0x30
 8004002:	3e01      	subs	r6, #1
 8004004:	7033      	strb	r3, [r6, #0]
 8004006:	9b04      	ldr	r3, [sp, #16]
 8004008:	1b9b      	subs	r3, r3, r6
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	9b07      	ldr	r3, [sp, #28]
 800400e:	0021      	movs	r1, r4
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	9805      	ldr	r0, [sp, #20]
 8004014:	9b06      	ldr	r3, [sp, #24]
 8004016:	aa09      	add	r2, sp, #36	; 0x24
 8004018:	f7ff fef2 	bl	8003e00 <_printf_common>
 800401c:	3001      	adds	r0, #1
 800401e:	d147      	bne.n	80040b0 <_printf_i+0x1d0>
 8004020:	2001      	movs	r0, #1
 8004022:	4240      	negs	r0, r0
 8004024:	b00b      	add	sp, #44	; 0x2c
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004028:	2220      	movs	r2, #32
 800402a:	6809      	ldr	r1, [r1, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	6022      	str	r2, [r4, #0]
 8004030:	2278      	movs	r2, #120	; 0x78
 8004032:	4932      	ldr	r1, [pc, #200]	; (80040fc <_printf_i+0x21c>)
 8004034:	9103      	str	r1, [sp, #12]
 8004036:	0021      	movs	r1, r4
 8004038:	3145      	adds	r1, #69	; 0x45
 800403a:	700a      	strb	r2, [r1, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	c920      	ldmia	r1!, {r5}
 8004042:	0610      	lsls	r0, r2, #24
 8004044:	d402      	bmi.n	800404c <_printf_i+0x16c>
 8004046:	0650      	lsls	r0, r2, #25
 8004048:	d500      	bpl.n	800404c <_printf_i+0x16c>
 800404a:	b2ad      	uxth	r5, r5
 800404c:	6019      	str	r1, [r3, #0]
 800404e:	07d3      	lsls	r3, r2, #31
 8004050:	d502      	bpl.n	8004058 <_printf_i+0x178>
 8004052:	2320      	movs	r3, #32
 8004054:	4313      	orrs	r3, r2
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	2710      	movs	r7, #16
 800405a:	2d00      	cmp	r5, #0
 800405c:	d1a9      	bne.n	8003fb2 <_printf_i+0xd2>
 800405e:	2220      	movs	r2, #32
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	4393      	bics	r3, r2
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	e7a4      	b.n	8003fb2 <_printf_i+0xd2>
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	680d      	ldr	r5, [r1, #0]
 800406c:	1d10      	adds	r0, r2, #4
 800406e:	6949      	ldr	r1, [r1, #20]
 8004070:	6018      	str	r0, [r3, #0]
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	062e      	lsls	r6, r5, #24
 8004076:	d501      	bpl.n	800407c <_printf_i+0x19c>
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	e002      	b.n	8004082 <_printf_i+0x1a2>
 800407c:	066d      	lsls	r5, r5, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0x198>
 8004080:	8019      	strh	r1, [r3, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	9e04      	ldr	r6, [sp, #16]
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	e7c0      	b.n	800400c <_printf_i+0x12c>
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	1d11      	adds	r1, r2, #4
 800408e:	6019      	str	r1, [r3, #0]
 8004090:	6816      	ldr	r6, [r2, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	0030      	movs	r0, r6
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	f000 f984 	bl	80043a4 <memchr>
 800409c:	2800      	cmp	r0, #0
 800409e:	d001      	beq.n	80040a4 <_printf_i+0x1c4>
 80040a0:	1b80      	subs	r0, r0, r6
 80040a2:	6060      	str	r0, [r4, #4]
 80040a4:	6863      	ldr	r3, [r4, #4]
 80040a6:	6123      	str	r3, [r4, #16]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9a04      	ldr	r2, [sp, #16]
 80040ac:	7013      	strb	r3, [r2, #0]
 80040ae:	e7ad      	b.n	800400c <_printf_i+0x12c>
 80040b0:	0032      	movs	r2, r6
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	9906      	ldr	r1, [sp, #24]
 80040b6:	9805      	ldr	r0, [sp, #20]
 80040b8:	9d07      	ldr	r5, [sp, #28]
 80040ba:	47a8      	blx	r5
 80040bc:	3001      	adds	r0, #1
 80040be:	d0af      	beq.n	8004020 <_printf_i+0x140>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	079b      	lsls	r3, r3, #30
 80040c4:	d415      	bmi.n	80040f2 <_printf_i+0x212>
 80040c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c8:	68e0      	ldr	r0, [r4, #12]
 80040ca:	4298      	cmp	r0, r3
 80040cc:	daaa      	bge.n	8004024 <_printf_i+0x144>
 80040ce:	0018      	movs	r0, r3
 80040d0:	e7a8      	b.n	8004024 <_printf_i+0x144>
 80040d2:	0022      	movs	r2, r4
 80040d4:	2301      	movs	r3, #1
 80040d6:	9906      	ldr	r1, [sp, #24]
 80040d8:	9805      	ldr	r0, [sp, #20]
 80040da:	9e07      	ldr	r6, [sp, #28]
 80040dc:	3219      	adds	r2, #25
 80040de:	47b0      	blx	r6
 80040e0:	3001      	adds	r0, #1
 80040e2:	d09d      	beq.n	8004020 <_printf_i+0x140>
 80040e4:	3501      	adds	r5, #1
 80040e6:	68e3      	ldr	r3, [r4, #12]
 80040e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	42ab      	cmp	r3, r5
 80040ee:	dcf0      	bgt.n	80040d2 <_printf_i+0x1f2>
 80040f0:	e7e9      	b.n	80040c6 <_printf_i+0x1e6>
 80040f2:	2500      	movs	r5, #0
 80040f4:	e7f7      	b.n	80040e6 <_printf_i+0x206>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	08004429 	.word	0x08004429
 80040fc:	0800443a 	.word	0x0800443a

08004100 <__sflush_r>:
 8004100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004102:	898b      	ldrh	r3, [r1, #12]
 8004104:	0005      	movs	r5, r0
 8004106:	000c      	movs	r4, r1
 8004108:	071a      	lsls	r2, r3, #28
 800410a:	d45c      	bmi.n	80041c6 <__sflush_r+0xc6>
 800410c:	684a      	ldr	r2, [r1, #4]
 800410e:	2a00      	cmp	r2, #0
 8004110:	dc04      	bgt.n	800411c <__sflush_r+0x1c>
 8004112:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004114:	2a00      	cmp	r2, #0
 8004116:	dc01      	bgt.n	800411c <__sflush_r+0x1c>
 8004118:	2000      	movs	r0, #0
 800411a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800411c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800411e:	2f00      	cmp	r7, #0
 8004120:	d0fa      	beq.n	8004118 <__sflush_r+0x18>
 8004122:	2200      	movs	r2, #0
 8004124:	2080      	movs	r0, #128	; 0x80
 8004126:	682e      	ldr	r6, [r5, #0]
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	001a      	movs	r2, r3
 800412c:	0140      	lsls	r0, r0, #5
 800412e:	6a21      	ldr	r1, [r4, #32]
 8004130:	4002      	ands	r2, r0
 8004132:	4203      	tst	r3, r0
 8004134:	d034      	beq.n	80041a0 <__sflush_r+0xa0>
 8004136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	075b      	lsls	r3, r3, #29
 800413c:	d506      	bpl.n	800414c <__sflush_r+0x4c>
 800413e:	6863      	ldr	r3, [r4, #4]
 8004140:	1ac0      	subs	r0, r0, r3
 8004142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <__sflush_r+0x4c>
 8004148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800414a:	1ac0      	subs	r0, r0, r3
 800414c:	0002      	movs	r2, r0
 800414e:	2300      	movs	r3, #0
 8004150:	0028      	movs	r0, r5
 8004152:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004154:	6a21      	ldr	r1, [r4, #32]
 8004156:	47b8      	blx	r7
 8004158:	89a2      	ldrh	r2, [r4, #12]
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d106      	bne.n	800416c <__sflush_r+0x6c>
 800415e:	6829      	ldr	r1, [r5, #0]
 8004160:	291d      	cmp	r1, #29
 8004162:	d82c      	bhi.n	80041be <__sflush_r+0xbe>
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <__sflush_r+0x110>)
 8004166:	410b      	asrs	r3, r1
 8004168:	07db      	lsls	r3, r3, #31
 800416a:	d428      	bmi.n	80041be <__sflush_r+0xbe>
 800416c:	2300      	movs	r3, #0
 800416e:	6063      	str	r3, [r4, #4]
 8004170:	6923      	ldr	r3, [r4, #16]
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	04d2      	lsls	r2, r2, #19
 8004176:	d505      	bpl.n	8004184 <__sflush_r+0x84>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <__sflush_r+0x82>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d100      	bne.n	8004184 <__sflush_r+0x84>
 8004182:	6560      	str	r0, [r4, #84]	; 0x54
 8004184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004186:	602e      	str	r6, [r5, #0]
 8004188:	2900      	cmp	r1, #0
 800418a:	d0c5      	beq.n	8004118 <__sflush_r+0x18>
 800418c:	0023      	movs	r3, r4
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	4299      	cmp	r1, r3
 8004192:	d002      	beq.n	800419a <__sflush_r+0x9a>
 8004194:	0028      	movs	r0, r5
 8004196:	f7ff fbf1 	bl	800397c <_free_r>
 800419a:	2000      	movs	r0, #0
 800419c:	6360      	str	r0, [r4, #52]	; 0x34
 800419e:	e7bc      	b.n	800411a <__sflush_r+0x1a>
 80041a0:	2301      	movs	r3, #1
 80041a2:	0028      	movs	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	d1c6      	bne.n	8004138 <__sflush_r+0x38>
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0c3      	beq.n	8004138 <__sflush_r+0x38>
 80041b0:	2b1d      	cmp	r3, #29
 80041b2:	d001      	beq.n	80041b8 <__sflush_r+0xb8>
 80041b4:	2b16      	cmp	r3, #22
 80041b6:	d101      	bne.n	80041bc <__sflush_r+0xbc>
 80041b8:	602e      	str	r6, [r5, #0]
 80041ba:	e7ad      	b.n	8004118 <__sflush_r+0x18>
 80041bc:	89a2      	ldrh	r2, [r4, #12]
 80041be:	2340      	movs	r3, #64	; 0x40
 80041c0:	4313      	orrs	r3, r2
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	e7a9      	b.n	800411a <__sflush_r+0x1a>
 80041c6:	690e      	ldr	r6, [r1, #16]
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	d0a5      	beq.n	8004118 <__sflush_r+0x18>
 80041cc:	680f      	ldr	r7, [r1, #0]
 80041ce:	600e      	str	r6, [r1, #0]
 80041d0:	1bba      	subs	r2, r7, r6
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d100      	bne.n	80041dc <__sflush_r+0xdc>
 80041da:	694a      	ldr	r2, [r1, #20]
 80041dc:	60a2      	str	r2, [r4, #8]
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dd99      	ble.n	8004118 <__sflush_r+0x18>
 80041e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041e6:	0032      	movs	r2, r6
 80041e8:	001f      	movs	r7, r3
 80041ea:	0028      	movs	r0, r5
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	6a21      	ldr	r1, [r4, #32]
 80041f0:	47b8      	blx	r7
 80041f2:	2800      	cmp	r0, #0
 80041f4:	dc06      	bgt.n	8004204 <__sflush_r+0x104>
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	2001      	movs	r0, #1
 80041fa:	89a2      	ldrh	r2, [r4, #12]
 80041fc:	4240      	negs	r0, r0
 80041fe:	4313      	orrs	r3, r2
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e78a      	b.n	800411a <__sflush_r+0x1a>
 8004204:	9b01      	ldr	r3, [sp, #4]
 8004206:	1836      	adds	r6, r6, r0
 8004208:	1a1b      	subs	r3, r3, r0
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	e7e7      	b.n	80041de <__sflush_r+0xde>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	dfbffffe 	.word	0xdfbffffe

08004214 <_fflush_r>:
 8004214:	690b      	ldr	r3, [r1, #16]
 8004216:	b570      	push	{r4, r5, r6, lr}
 8004218:	0005      	movs	r5, r0
 800421a:	000c      	movs	r4, r1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <_fflush_r+0x12>
 8004220:	2500      	movs	r5, #0
 8004222:	0028      	movs	r0, r5
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	2800      	cmp	r0, #0
 8004228:	d004      	beq.n	8004234 <_fflush_r+0x20>
 800422a:	6a03      	ldr	r3, [r0, #32]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <_fflush_r+0x20>
 8004230:	f7ff f98a 	bl	8003548 <__sinit>
 8004234:	220c      	movs	r2, #12
 8004236:	5ea3      	ldrsh	r3, [r4, r2]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f1      	beq.n	8004220 <_fflush_r+0xc>
 800423c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800423e:	07d2      	lsls	r2, r2, #31
 8004240:	d404      	bmi.n	800424c <_fflush_r+0x38>
 8004242:	059b      	lsls	r3, r3, #22
 8004244:	d402      	bmi.n	800424c <_fflush_r+0x38>
 8004246:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004248:	f7ff fb95 	bl	8003976 <__retarget_lock_acquire_recursive>
 800424c:	0028      	movs	r0, r5
 800424e:	0021      	movs	r1, r4
 8004250:	f7ff ff56 	bl	8004100 <__sflush_r>
 8004254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004256:	0005      	movs	r5, r0
 8004258:	07db      	lsls	r3, r3, #31
 800425a:	d4e2      	bmi.n	8004222 <_fflush_r+0xe>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	059b      	lsls	r3, r3, #22
 8004260:	d4df      	bmi.n	8004222 <_fflush_r+0xe>
 8004262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004264:	f7ff fb88 	bl	8003978 <__retarget_lock_release_recursive>
 8004268:	e7db      	b.n	8004222 <_fflush_r+0xe>
	...

0800426c <__swhatbuf_r>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	000e      	movs	r6, r1
 8004270:	001d      	movs	r5, r3
 8004272:	230e      	movs	r3, #14
 8004274:	5ec9      	ldrsh	r1, [r1, r3]
 8004276:	0014      	movs	r4, r2
 8004278:	b096      	sub	sp, #88	; 0x58
 800427a:	2900      	cmp	r1, #0
 800427c:	da0c      	bge.n	8004298 <__swhatbuf_r+0x2c>
 800427e:	89b2      	ldrh	r2, [r6, #12]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	0011      	movs	r1, r2
 8004284:	4019      	ands	r1, r3
 8004286:	421a      	tst	r2, r3
 8004288:	d013      	beq.n	80042b2 <__swhatbuf_r+0x46>
 800428a:	2100      	movs	r1, #0
 800428c:	3b40      	subs	r3, #64	; 0x40
 800428e:	2000      	movs	r0, #0
 8004290:	6029      	str	r1, [r5, #0]
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	b016      	add	sp, #88	; 0x58
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	466a      	mov	r2, sp
 800429a:	f000 f84d 	bl	8004338 <_fstat_r>
 800429e:	2800      	cmp	r0, #0
 80042a0:	dbed      	blt.n	800427e <__swhatbuf_r+0x12>
 80042a2:	23f0      	movs	r3, #240	; 0xf0
 80042a4:	9901      	ldr	r1, [sp, #4]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	4019      	ands	r1, r3
 80042aa:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <__swhatbuf_r+0x4c>)
 80042ac:	18c9      	adds	r1, r1, r3
 80042ae:	424b      	negs	r3, r1
 80042b0:	4159      	adcs	r1, r3
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	e7ea      	b.n	800428e <__swhatbuf_r+0x22>
 80042b8:	ffffe000 	.word	0xffffe000

080042bc <__smakebuf_r>:
 80042bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042be:	2602      	movs	r6, #2
 80042c0:	898b      	ldrh	r3, [r1, #12]
 80042c2:	0005      	movs	r5, r0
 80042c4:	000c      	movs	r4, r1
 80042c6:	4233      	tst	r3, r6
 80042c8:	d006      	beq.n	80042d8 <__smakebuf_r+0x1c>
 80042ca:	0023      	movs	r3, r4
 80042cc:	3347      	adds	r3, #71	; 0x47
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	2301      	movs	r3, #1
 80042d4:	6163      	str	r3, [r4, #20]
 80042d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80042d8:	466a      	mov	r2, sp
 80042da:	ab01      	add	r3, sp, #4
 80042dc:	f7ff ffc6 	bl	800426c <__swhatbuf_r>
 80042e0:	9900      	ldr	r1, [sp, #0]
 80042e2:	0007      	movs	r7, r0
 80042e4:	0028      	movs	r0, r5
 80042e6:	f7ff fbb5 	bl	8003a54 <_malloc_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d108      	bne.n	8004300 <__smakebuf_r+0x44>
 80042ee:	220c      	movs	r2, #12
 80042f0:	5ea3      	ldrsh	r3, [r4, r2]
 80042f2:	059a      	lsls	r2, r3, #22
 80042f4:	d4ef      	bmi.n	80042d6 <__smakebuf_r+0x1a>
 80042f6:	2203      	movs	r2, #3
 80042f8:	4393      	bics	r3, r2
 80042fa:	431e      	orrs	r6, r3
 80042fc:	81a6      	strh	r6, [r4, #12]
 80042fe:	e7e4      	b.n	80042ca <__smakebuf_r+0xe>
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	89a2      	ldrh	r2, [r4, #12]
 8004304:	6020      	str	r0, [r4, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	9b00      	ldr	r3, [sp, #0]
 800430c:	6120      	str	r0, [r4, #16]
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	9b01      	ldr	r3, [sp, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <__smakebuf_r+0x74>
 8004316:	0028      	movs	r0, r5
 8004318:	230e      	movs	r3, #14
 800431a:	5ee1      	ldrsh	r1, [r4, r3]
 800431c:	f000 f81e 	bl	800435c <_isatty_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	d005      	beq.n	8004330 <__smakebuf_r+0x74>
 8004324:	2303      	movs	r3, #3
 8004326:	89a2      	ldrh	r2, [r4, #12]
 8004328:	439a      	bics	r2, r3
 800432a:	3b02      	subs	r3, #2
 800432c:	4313      	orrs	r3, r2
 800432e:	81a3      	strh	r3, [r4, #12]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	433b      	orrs	r3, r7
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	e7ce      	b.n	80042d6 <__smakebuf_r+0x1a>

08004338 <_fstat_r>:
 8004338:	2300      	movs	r3, #0
 800433a:	b570      	push	{r4, r5, r6, lr}
 800433c:	4d06      	ldr	r5, [pc, #24]	; (8004358 <_fstat_r+0x20>)
 800433e:	0004      	movs	r4, r0
 8004340:	0008      	movs	r0, r1
 8004342:	0011      	movs	r1, r2
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	f7fc fbf9 	bl	8000b3c <_fstat>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	d103      	bne.n	8004356 <_fstat_r+0x1e>
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d000      	beq.n	8004356 <_fstat_r+0x1e>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	200002d8 	.word	0x200002d8

0800435c <_isatty_r>:
 800435c:	2300      	movs	r3, #0
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	4d06      	ldr	r5, [pc, #24]	; (800437c <_isatty_r+0x20>)
 8004362:	0004      	movs	r4, r0
 8004364:	0008      	movs	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fbf6 	bl	8000b58 <_isatty>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d103      	bne.n	8004378 <_isatty_r+0x1c>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d000      	beq.n	8004378 <_isatty_r+0x1c>
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	200002d8 	.word	0x200002d8

08004380 <_sbrk_r>:
 8004380:	2300      	movs	r3, #0
 8004382:	b570      	push	{r4, r5, r6, lr}
 8004384:	4d06      	ldr	r5, [pc, #24]	; (80043a0 <_sbrk_r+0x20>)
 8004386:	0004      	movs	r4, r0
 8004388:	0008      	movs	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fc fbf8 	bl	8000b80 <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d103      	bne.n	800439c <_sbrk_r+0x1c>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d000      	beq.n	800439c <_sbrk_r+0x1c>
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	200002d8 	.word	0x200002d8

080043a4 <memchr>:
 80043a4:	b2c9      	uxtb	r1, r1
 80043a6:	1882      	adds	r2, r0, r2
 80043a8:	4290      	cmp	r0, r2
 80043aa:	d101      	bne.n	80043b0 <memchr+0xc>
 80043ac:	2000      	movs	r0, #0
 80043ae:	4770      	bx	lr
 80043b0:	7803      	ldrb	r3, [r0, #0]
 80043b2:	428b      	cmp	r3, r1
 80043b4:	d0fb      	beq.n	80043ae <memchr+0xa>
 80043b6:	3001      	adds	r0, #1
 80043b8:	e7f6      	b.n	80043a8 <memchr+0x4>
	...

080043bc <_init>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr

080043c8 <_fini>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr
